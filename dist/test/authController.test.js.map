{"version":3,"file":"authController.test.js","sources":["test/authController.test.ts"],"sourceRoot":"/","sourcesContent":["import { Types } from \"mongoose\";\nimport * as authController from \"../controllers/authController\";\nimport * as userService from \"../services/userService\";\nimport AppError from \"../utils/appError\";\nimport { mockRequest, mockResponse } from \"../utils/testHelpers\";\nimport jwt from \"jsonwebtoken\";\nimport env from \"../config/env\";\n\njest.mock(\"../services/userService\");\njest.mock(\"jsonwebtoken\");\n\ndescribe(\"Auth Controller\", () => {\n  let next: jest.Mock;\n\n  beforeEach(() => {\n    next = jest.fn();\n    jest.resetAllMocks();\n  });\n\n  describe(\"register\", () => {\n    it(\"should register a new user\", async () => {\n      const req = mockRequest();\n      const res = mockResponse();\n      const newUser = {\n        username: \"testuser\",\n        email: \"test@example.com\",\n        password: \"password123\",\n      };\n      const createdUser = { _id: new Types.ObjectId(), ...newUser };\n\n      req.body = newUser;\n      (userService.register as jest.Mock).mockResolvedValue(createdUser);\n\n      await authController.register(req as any, res as any, next);\n\n      expect(userService.register).toHaveBeenCalledWith(\n        newUser.username,\n        newUser.email,\n        newUser.password\n      );\n      expect(res.status).toHaveBeenCalledWith(201);\n      expect(res.json).toHaveBeenCalledWith({\n        message:\n          \"Registration successful. Please check your email for verification.\",\n        user: createdUser,\n      });\n    });\n\n    it(\"should handle errors during registration\", async () => {\n      const req = mockRequest();\n      const res = mockResponse();\n      const newUser = {\n        username: \"testuser\",\n        email: \"test@example.com\",\n        password: \"password123\",\n      };\n\n      req.body = newUser;\n      (userService.register as jest.Mock).mockRejectedValue(\n        new Error(\"Registration failed\")\n      );\n\n      await authController.register(req as any, res as any, next);\n\n      expect(userService.register).toHaveBeenCalledWith(\n        newUser.username,\n        newUser.email,\n        newUser.password\n      );\n      expect(next).toHaveBeenCalledWith(expect.any(Error));\n    });\n  });\n\n  describe(\"login\", () => {\n    it(\"should log in a user and return tokens\", async () => {\n      const req = mockRequest();\n      const res = mockResponse();\n      const loginData = {\n        email: \"test@example.com\",\n        password: \"password123\",\n      };\n      const user = { id: new Types.ObjectId(), ...loginData };\n\n      req.body = loginData;\n      (userService.login as jest.Mock).mockResolvedValue({ user });\n      (jwt.sign as jest.Mock)\n        .mockReturnValueOnce(\"accessToken\")\n        .mockReturnValueOnce(\"refreshToken\");\n\n      await authController.login(req as any, res as any, next);\n\n      expect(userService.login).toHaveBeenCalledWith(\n        loginData.email,\n        loginData.password\n      );\n      expect(jwt.sign).toHaveBeenCalledTimes(2);\n      expect(res.cookie).toHaveBeenCalledTimes(2);\n      expect(res.status).toHaveBeenCalledWith(200);\n      expect(res.json).toHaveBeenCalledWith({\n        message: \"Login successful\",\n        user,\n        accessToken: \"accessToken\",\n        refreshToken: \"refreshToken\",\n      });\n    });\n  });\n\n  describe(\"refreshTokens\", () => {\n    it(\"should refresh tokens when given a valid refresh token\", async () => {\n      const req = mockRequest();\n      const res = mockResponse();\n      const userId = new Types.ObjectId().toString();\n\n      req.cookies = { refreshToken: \"validRefreshToken\" };\n      (jwt.verify as jest.Mock).mockReturnValue({ id: userId });\n      (jwt.sign as jest.Mock)\n        .mockReturnValueOnce(\"newAccessToken\")\n        .mockReturnValueOnce(\"newRefreshToken\");\n\n      await authController.refreshTokens(req as any, res as any, next);\n\n      expect(jwt.verify).toHaveBeenCalledWith(\n        \"validRefreshToken\",\n        env.REFRESH_TOKEN_SECRET\n      );\n      expect(jwt.sign).toHaveBeenCalledTimes(2);\n      expect(res.cookie).toHaveBeenCalledTimes(2);\n      expect(res.status).toHaveBeenCalledWith(200);\n      expect(res.json).toHaveBeenCalledWith({\n        status: \"success\",\n        message: \"Tokens refreshed successfully\",\n        accessToken: \"newAccessToken\",\n        refreshToken: \"newRefreshToken\",\n      });\n    });\n\n    it(\"should handle missing refresh token\", async () => {\n      const req = mockRequest();\n      const res = mockResponse();\n\n      req.cookies = {};\n\n      await authController.refreshTokens(req as any, res as any, next);\n\n      expect(next).toHaveBeenCalledWith(expect.any(AppError));\n      expect(next.mock.calls[0][0].message).toBe(\"Refresh token is required\");\n      expect(next.mock.calls[0][0].statusCode).toBe(400);\n    });\n\n    it(\"should handle invalid refresh token\", async () => {\n      const req = mockRequest();\n      const res = mockResponse();\n\n      req.cookies = { refreshToken: \"invalidRefreshToken\" };\n      (jwt.verify as jest.Mock).mockImplementation(() => {\n        throw new Error(\"Invalid token\");\n      });\n\n      await authController.refreshTokens(req as any, res as any, next);\n\n      expect(next).toHaveBeenCalledWith(expect.any(AppError));\n      expect(next.mock.calls[0][0].message).toBe(\n        \"Invalid or expired refresh token\"\n      );\n      expect(next.mock.calls[0][0].statusCode).toBe(401);\n    });\n  });\n\n});\n"],"names":[],"mappings":"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","debug_id":"78a746b9-a163-54cd-82b5-df9a050b5ee3"}