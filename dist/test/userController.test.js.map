{"version":3,"file":"userController.test.js","sources":["test/userController.test.ts"],"sourceRoot":"/","sourcesContent":["import { Types } from \"mongoose\";\nimport * as userController from \"../controllers/userController\";\nimport * as userService from \"../services/userService\";\nimport AppError from \"../utils/appError\";\nimport { mockRequest, mockResponse } from \"../utils/testHelpers\";\n\njest.mock(\"../services/userService\");\n\ndescribe(\"User Controller\", () => {\n  const next = jest.fn();\n\n  describe(\"getUserById\", () => {\n    it(\"should handle invalid user ID\", async () => {\n      const req = mockRequest();\n      const res = mockResponse();\n\n      req.params = {}; // No ID provided\n\n      await userController.getUserById(req as any, res as any, next);\n\n      expect(next).toHaveBeenCalledWith(\n        new AppError(\"No user ID provided\", 400)\n      );\n    });\n\n    it(\"should return a user by id\", async () => {\n      const req = mockRequest();\n      const res = mockResponse();\n      const userId = new Types.ObjectId();\n      const user = { _id: userId, username: \"JohnDoe\" };\n\n      req.params = { id: userId.toHexString() };\n      (userService.getUserById as jest.Mock).mockResolvedValue(user);\n\n      await userController.getUserById(req as any, res as any, next);\n\n      expect(userService.getUserById).toHaveBeenCalledWith(\n        userId.toHexString()\n      );\n      expect(res.status).toHaveBeenCalledWith(200);\n      expect(res.json).toHaveBeenCalledWith({\n        status: \"success\",\n        data: { user },\n      });\n    });\n\n    it(\"should return 404 if user not found\", async () => {\n      const req = mockRequest();\n      const res = mockResponse();\n      const userId = new Types.ObjectId();\n\n      req.params = { id: userId.toHexString() };\n      (userService.getUserById as jest.Mock).mockResolvedValue(null);\n\n      await userController.getUserById(req as any, res as any, next);\n\n      expect(userService.getUserById).toHaveBeenCalledWith(\n        userId.toHexString()\n      );\n      expect(next).toHaveBeenCalledWith(new AppError(\"User not found\", 404));\n    });\n  });\n\n  describe(\"updateUser\", () => {\n    it(\"should handle invalid user ID\", async () => {\n      const req = mockRequest();\n      const res = mockResponse();\n\n      req.params = {}; // No ID provided\n      req.body = { username: \"JaneDoe\" };\n\n      await userController.updateUserById(req as any, res as any, next);\n\n      expect(next).toHaveBeenCalledWith(\n        new AppError(\"No user ID provided\", 400)\n      );\n    });\n\n    it(\"should update a user and return it\", async () => {\n      const req = mockRequest();\n      const res = mockResponse();\n      const userId = new Types.ObjectId();\n      const updatedUser = { _id: userId, username: \"JaneDoe\" };\n\n      req.params = { id: userId.toHexString() };\n      req.body = { username: \"JaneDoe\" };\n      (userService.updateUser as jest.Mock).mockResolvedValue(updatedUser);\n\n      await userController.updateUserById(req as any, res as any, next);\n\n      expect(userService.updateUser).toHaveBeenCalledWith(\n        userId.toHexString(),\n        req.body\n      );\n      expect(res.status).toHaveBeenCalledWith(200);\n      expect(res.json).toHaveBeenCalledWith({\n        status: \"success\",\n        data: { user: updatedUser },\n      });\n    });\n\n    it(\"should return 404 if user not found\", async () => {\n      const req = mockRequest();\n      const res = mockResponse();\n      const userId = new Types.ObjectId();\n\n      req.params = { id: userId.toHexString() };\n      req.body = { username: \"JaneDoe\" };\n      (userService.updateUser as jest.Mock).mockResolvedValue(null);\n\n      await userController.updateUserById(req as any, res as any, next);\n\n      expect(userService.updateUser).toHaveBeenCalledWith(\n        userId.toHexString(),\n        req.body\n      );\n      expect(next).toHaveBeenCalledWith(new AppError(\"User not found\", 404));\n    });\n  });\n\n  describe(\"deleteUser\", () => {\n    it(\"should handle invalid user ID\", async () => {\n      const req = mockRequest();\n      const res = mockResponse();\n\n      req.params = {}; \n\n      await userController.deleteUserById(req as any, res as any, next);\n\n      expect(next).toHaveBeenCalledWith(\n        new AppError(\"No user ID provided\", 400)\n      );\n    });\n\n    it(\"should delete a user and return success message\", async () => {\n      const req = mockRequest();\n      const res = mockResponse();\n      const userId = new Types.ObjectId();\n\n      req.params = { id: userId.toHexString() };\n      (userService.deleteUser as jest.Mock).mockResolvedValue(true);\n\n      await userController.deleteUserById(req as any, res as any, next);\n\n      expect(userService.deleteUser).toHaveBeenCalledWith(userId.toHexString());\n      expect(res.status).toHaveBeenCalledWith(200);\n      expect(res.json).toHaveBeenCalledWith({\n        status: \"success\",\n        message: \"User successfully deleted\",\n        data: null,\n      });\n    });\n\n    it(\"should return 404 if user not found\", async () => {\n      const req = mockRequest();\n      const res = mockResponse();\n      const userId = new Types.ObjectId();\n\n      req.params = { id: userId.toHexString() };\n      (userService.deleteUser as jest.Mock).mockResolvedValue(false);\n\n      await userController.deleteUserById(req as any, res as any, next);\n\n      expect(userService.deleteUser).toHaveBeenCalledWith(userId.toHexString());\n      expect(next).toHaveBeenCalledWith(new AppError(\"User not found\", 404));\n    });\n  });\n});\n"],"names":[],"mappings":"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","debug_id":"21fd1c70-d05b-583b-b700-7ebb3a178295"}