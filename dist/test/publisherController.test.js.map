{"version":3,"file":"publisherController.test.js","sources":["test/publisherController.test.ts"],"sourceRoot":"/","sourcesContent":["import { Types } from \"mongoose\";\nimport * as publisherController from \"../controllers/publisherController\";\nimport * as PublisherService from \"../services/publisherService\";\nimport AppError from \"../utils/appError\";\nimport { mockRequest, mockResponse } from \"../utils/testHelpers\";\n\njest.mock(\"../services/publisherService\");\n\ndescribe(\"Publisher Controller\", () => {\n  let next: jest.Mock;\n\n  beforeEach(() => {\n    next = jest.fn();\n  });\n\n  describe(\"createPublisher\", () => {\n    it(\"should create a new publisher\", async () => {\n      const req = mockRequest();\n      const res = mockResponse();\n      const newPublisher = {\n        name: \"Test Publisher\",\n        location: \"Test Location\",\n      };\n      const createdPublisher = { _id: new Types.ObjectId(), ...newPublisher };\n\n      req.body = newPublisher;\n      (PublisherService.createPublisher as jest.Mock).mockResolvedValue(\n        createdPublisher\n      );\n\n      await publisherController.createPublisher(req as any, res as any, next);\n\n      expect(PublisherService.createPublisher).toHaveBeenCalledWith(\n        newPublisher\n      );\n      expect(res.status).toHaveBeenCalledWith(201);\n      expect(res.json).toHaveBeenCalledWith({\n        status: \"success\",\n        data: {\n          publisher: createdPublisher,\n        },\n      });\n    });\n\n    it(\"should handle errors during publisher creation\", async () => {\n      const req = mockRequest();\n      const res = mockResponse();\n      const newPublisher = {\n        name: \"Test Publisher\",\n        location: \"Test Location\",\n      };\n\n      req.body = newPublisher;\n      (PublisherService.createPublisher as jest.Mock).mockRejectedValue(\n        new Error(\"Service error\")\n      );\n\n      await publisherController.createPublisher(req as any, res as any, next);\n\n      expect(PublisherService.createPublisher).toHaveBeenCalledWith(\n        newPublisher\n      );\n      expect(next).toHaveBeenCalledWith(expect.any(AppError));\n      expect(next.mock.calls[0][0].message).toBe(\"Failed to create publisher\");\n      expect(next.mock.calls[0][0].statusCode).toBe(500);\n    });\n  });\n\n  describe(\"getAllPublishers\", () => {\n    it(\"should get all publishers\", async () => {\n      const req = mockRequest();\n      const res = mockResponse();\n      const publishers = [\n        { _id: new Types.ObjectId(), name: \"Publisher 1\" },\n        { _id: new Types.ObjectId(), name: \"Publisher 2\" },\n      ];\n\n      (PublisherService.getAllPublishers as jest.Mock).mockResolvedValue(\n        publishers\n      );\n\n      await publisherController.getAllPublishers(req as any, res as any, next);\n\n      expect(PublisherService.getAllPublishers).toHaveBeenCalledWith(\n        {},\n        1,\n        10,\n        {}\n      );\n      expect(res.status).toHaveBeenCalledWith(200);\n      expect(res.json).toHaveBeenCalledWith({\n        status: \"success\",\n        data: {\n          publishers,\n        },\n      });\n    });\n\n    it(\"should handle errors during fetch of publishers\", async () => {\n      const req = mockRequest();\n      const res = mockResponse();\n\n      (PublisherService.getAllPublishers as jest.Mock).mockRejectedValue(\n        new Error(\"Failed to fetch publishers\")\n      );\n\n      await publisherController.getAllPublishers(req as any, res as any, next);\n\n      expect(PublisherService.getAllPublishers).toHaveBeenCalledWith(\n        {},\n        1,\n        10,\n        {}\n      );\n      expect(next).toHaveBeenCalledWith(expect.any(AppError));\n      expect(next.mock.calls[0][0].message).toBe(\"Failed to fetch publishers\");\n      expect(next.mock.calls[0][0].statusCode).toBe(500);\n    });\n  });\n\n  describe(\"addBookToPublisher\", () => {\n    it(\"should add a book to a publisher\", async () => {\n      const req = mockRequest();\n      const res = mockResponse();\n      const publisherId = new Types.ObjectId();\n      const bookId = new Types.ObjectId();\n      const publisher = {\n        _id: publisherId,\n        name: \"Test Publisher\",\n        books: [bookId],\n      };\n\n      req.params = {\n        publisherId: publisherId.toHexString(),\n        bookId: bookId.toHexString(),\n      };\n      (PublisherService.addBookToPublisher as jest.Mock).mockResolvedValue(\n        publisher\n      );\n\n      await publisherController.addBookToPublisher(\n        req as any,\n        res as any,\n        next\n      );\n\n      expect(PublisherService.addBookToPublisher).toHaveBeenCalledWith(\n        publisherId,\n        bookId\n      );\n      expect(res.status).toHaveBeenCalledWith(200);\n      expect(res.json).toHaveBeenCalledWith({\n        status: \"success\",\n        data: {\n          publisher,\n        },\n      });\n    });\n\n    it(\"should handle publisher not found\", async () => {\n      const req = mockRequest();\n      const res = mockResponse();\n      const publisherId = new Types.ObjectId();\n      const bookId = new Types.ObjectId();\n\n      req.params = {\n        publisherId: publisherId.toHexString(),\n        bookId: bookId.toHexString(),\n      };\n      (PublisherService.addBookToPublisher as jest.Mock).mockResolvedValue(\n        null\n      );\n\n      await publisherController.addBookToPublisher(\n        req as any,\n        res as any,\n        next\n      );\n\n      expect(PublisherService.addBookToPublisher).toHaveBeenCalledWith(\n        publisherId,\n        bookId\n      );\n      expect(next).toHaveBeenCalledWith(expect.any(AppError));\n      expect(next.mock.calls[0][0].message).toBe(\n        \"No publisher found with that ID\"\n      );\n      expect(next.mock.calls[0][0].statusCode).toBe(404);\n    });\n\n    it(\"should handle invalid publisher ID format\", async () => {\n      const req = mockRequest();\n      const res = mockResponse();\n      req.params = {\n        publisherId: \"invalidID\",\n        bookId: new Types.ObjectId().toHexString(),\n      };\n\n      await publisherController.addBookToPublisher(\n        req as any,\n        res as any,\n        next\n      );\n\n      expect(next).toHaveBeenCalledWith(expect.any(AppError));\n      expect(next.mock.calls[0][0].message).toBe(\"Invalid ID format\");\n      expect(next.mock.calls[0][0].statusCode).toBe(400);\n    });\n\n    it(\"should handle invalid book ID format\", async () => {\n      const req = mockRequest();\n      const res = mockResponse();\n      req.params = {\n        publisherId: new Types.ObjectId().toHexString(),\n        bookId: \"invalidID\",\n      };\n\n      await publisherController.addBookToPublisher(\n        req as any,\n        res as any,\n        next\n      );\n\n      expect(next).toHaveBeenCalledWith(expect.any(AppError));\n      expect(next.mock.calls[0][0].message).toBe(\"Invalid ID format\");\n      expect(next.mock.calls[0][0].statusCode).toBe(400);\n    });\n  });\n});\n"],"names":[],"mappings":"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","debug_id":"1f94dd30-0648-5163-8e3e-78dcbfe72085"}