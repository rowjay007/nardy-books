{"version":3,"file":"bookController.test.js","sources":["test/bookController.test.ts"],"sourceRoot":"/","sourcesContent":["import { Types } from \"mongoose\";\nimport * as bookController from \"../controllers/bookController\";\nimport * as BookService from \"../services/bookService\";\nimport AppError from \"../utils/appError\";\nimport { mockRequest, mockResponse } from \"../utils/testHelpers\";\n\njest.mock(\"../services/bookService\");\n\ndescribe(\"Book Controller\", () => {\n  const next = jest.fn();\n\n  describe(\"createBook\", () => {\n    it(\"should create a book and return it\", async () => {\n      const req = mockRequest();\n      const res = mockResponse();\n      const book = { title: \"Test Book\", author: \"Test Author\" };\n\n      req.body = book;\n      (BookService.createBook as jest.Mock).mockResolvedValue(book);\n\n      await bookController.createBook(req as any, res as any, next);\n\n      expect(BookService.createBook).toHaveBeenCalledWith(book);\n      expect(res.status).toHaveBeenCalledWith(201);\n      expect(res.json).toHaveBeenCalledWith(book);\n    });\n  });\n\n  describe(\"getBookById\", () => {\n    it(\"should return a book by id\", async () => {\n      const req = mockRequest();\n      const res = mockResponse();\n      const bookId = new Types.ObjectId();\n      const book = { _id: bookId, title: \"Test Book\", author: \"Test Author\" };\n\n      req.params = { id: bookId.toHexString() }; \n      (BookService.getBookById as jest.Mock).mockResolvedValue(book);\n\n      await bookController.getBookById(req as any, res as any, next);\n\n      expect(BookService.getBookById).toHaveBeenCalledWith(bookId);\n      expect(res.status).toHaveBeenCalledWith(200);\n      expect(res.json).toHaveBeenCalledWith(book);\n    });\n\n    it(\"should return 404 if book not found\", async () => {\n      const req = mockRequest();\n      const res = mockResponse();\n      const bookId = new Types.ObjectId();\n\n      req.params = { id: bookId.toHexString() }; \n      (BookService.getBookById as jest.Mock).mockResolvedValue(null);\n\n      await bookController.getBookById(req as any, res as any, next);\n\n      expect(BookService.getBookById).toHaveBeenCalledWith(bookId);\n      expect(next).toHaveBeenCalledWith(new AppError(\"Book not found\", 404));\n    });\n  });\n\n  describe(\"getAllBooks\", () => {\n    it(\"should return all books\", async () => {\n      const req = mockRequest();\n      const res = mockResponse();\n      const books = [{ title: \"Test Book 1\" }, { title: \"Test Book 2\" }];\n\n      (BookService.getAllBooks as jest.Mock).mockResolvedValue({\n        books,\n        total: books.length,\n      });\n\n      await bookController.getAllBooks(req as any, res as any, next);\n\n      expect(BookService.getAllBooks).toHaveBeenCalledWith(req.query);\n      expect(res.status).toHaveBeenCalledWith(200);\n      expect(res.json).toHaveBeenCalledWith({ books, total: books.length });\n    });\n  });\n\n  describe(\"updateBookById\", () => {\n    it(\"should update a book and return it\", async () => {\n      const req = mockRequest();\n      const res = mockResponse();\n      const bookId = new Types.ObjectId();\n      const updatedBook = { _id: bookId, title: \"Updated Title\" };\n\n      req.params = { id: bookId.toHexString() }; \n      req.body = { title: \"Updated Title\" };\n      (BookService.updateBookById as jest.Mock).mockResolvedValue(updatedBook);\n\n      await bookController.updateBookById(req as any, res as any, next);\n\n      expect(BookService.updateBookById).toHaveBeenCalledWith(bookId, req.body);\n      expect(res.status).toHaveBeenCalledWith(200);\n      expect(res.json).toHaveBeenCalledWith(updatedBook);\n    });\n\n    it(\"should return 404 if book not found\", async () => {\n      const req = mockRequest();\n      const res = mockResponse();\n      const bookId = new Types.ObjectId();\n\n      req.params = { id: bookId.toHexString() }; \n      req.body = { title: \"Updated Title\" };\n      (BookService.updateBookById as jest.Mock).mockResolvedValue(null);\n\n      await bookController.updateBookById(req as any, res as any, next);\n\n      expect(BookService.updateBookById).toHaveBeenCalledWith(bookId, req.body);\n      expect(next).toHaveBeenCalledWith(new AppError(\"Book not found\", 404));\n    });\n  });\n\n  describe(\"deleteBookById\", () => {\n    it(\"should delete a book and return success message\", async () => {\n      const req = mockRequest();\n      const res = mockResponse();\n      const bookId = new Types.ObjectId();\n\n      req.params = { id: bookId.toHexString() }; \n      (BookService.deleteBookById as jest.Mock).mockResolvedValue(undefined);\n\n      await bookController.deleteBookById(req as any, res as any, next);\n\n      expect(BookService.deleteBookById).toHaveBeenCalledWith(bookId);\n      expect(res.status).toHaveBeenCalledWith(200);\n      expect(res.json).toHaveBeenCalledWith({\n        message: \"Book deleted successfully\",\n      });\n    });\n  });\n});\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,uCAAiC;AACjC,8EAAgE;AAChE,qEAAuD;AACvD,iEAAyC;AACzC,sDAAiE;AAEjE,IAAI,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;AAErC,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;IAC/B,MAAM,IAAI,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;IAEvB,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;QAC1B,EAAE,CAAC,oCAAoC,EAAE,GAAS,EAAE;YAClD,MAAM,GAAG,GAAG,IAAA,yBAAW,GAAE,CAAC;YAC1B,MAAM,GAAG,GAAG,IAAA,0BAAY,GAAE,CAAC;YAC3B,MAAM,IAAI,GAAG,EAAE,KAAK,EAAE,WAAW,EAAE,MAAM,EAAE,aAAa,EAAE,CAAC;YAE3D,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC;YACf,WAAW,CAAC,UAAwB,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;YAE9D,MAAM,cAAc,CAAC,UAAU,CAAC,GAAU,EAAE,GAAU,EAAE,IAAI,CAAC,CAAC;YAE9D,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;YAC1D,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;YAC7C,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;QAC9C,CAAC,CAAA,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;QAC3B,EAAE,CAAC,4BAA4B,EAAE,GAAS,EAAE;YAC1C,MAAM,GAAG,GAAG,IAAA,yBAAW,GAAE,CAAC;YAC1B,MAAM,GAAG,GAAG,IAAA,0BAAY,GAAE,CAAC;YAC3B,MAAM,MAAM,GAAG,IAAI,gBAAK,CAAC,QAAQ,EAAE,CAAC;YACpC,MAAM,IAAI,GAAG,EAAE,GAAG,EAAE,MAAM,EAAE,KAAK,EAAE,WAAW,EAAE,MAAM,EAAE,aAAa,EAAE,CAAC;YAExE,GAAG,CAAC,MAAM,GAAG,EAAE,EAAE,EAAE,MAAM,CAAC,WAAW,EAAE,EAAE,CAAC;YACzC,WAAW,CAAC,WAAyB,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;YAE/D,MAAM,cAAc,CAAC,WAAW,CAAC,GAAU,EAAE,GAAU,EAAE,IAAI,CAAC,CAAC;YAE/D,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;YAC7D,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;YAC7C,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;QAC9C,CAAC,CAAA,CAAC,CAAC;QAEH,EAAE,CAAC,qCAAqC,EAAE,GAAS,EAAE;YACnD,MAAM,GAAG,GAAG,IAAA,yBAAW,GAAE,CAAC;YAC1B,MAAM,GAAG,GAAG,IAAA,0BAAY,GAAE,CAAC;YAC3B,MAAM,MAAM,GAAG,IAAI,gBAAK,CAAC,QAAQ,EAAE,CAAC;YAEpC,GAAG,CAAC,MAAM,GAAG,EAAE,EAAE,EAAE,MAAM,CAAC,WAAW,EAAE,EAAE,CAAC;YACzC,WAAW,CAAC,WAAyB,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;YAE/D,MAAM,cAAc,CAAC,WAAW,CAAC,GAAU,EAAE,GAAU,EAAE,IAAI,CAAC,CAAC;YAE/D,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;YAC7D,MAAM,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAAC,IAAI,kBAAQ,CAAC,gBAAgB,EAAE,GAAG,CAAC,CAAC,CAAC;QACzE,CAAC,CAAA,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;QAC3B,EAAE,CAAC,yBAAyB,EAAE,GAAS,EAAE;YACvC,MAAM,GAAG,GAAG,IAAA,yBAAW,GAAE,CAAC;YAC1B,MAAM,GAAG,GAAG,IAAA,0BAAY,GAAE,CAAC;YAC3B,MAAM,KAAK,GAAG,CAAC,EAAE,KAAK,EAAE,aAAa,EAAE,EAAE,EAAE,KAAK,EAAE,aAAa,EAAE,CAAC,CAAC;YAElE,WAAW,CAAC,WAAyB,CAAC,iBAAiB,CAAC;gBACvD,KAAK;gBACL,KAAK,EAAE,KAAK,CAAC,MAAM;aACpB,CAAC,CAAC;YAEH,MAAM,cAAc,CAAC,WAAW,CAAC,GAAU,EAAE,GAAU,EAAE,IAAI,CAAC,CAAC;YAE/D,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,oBAAoB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YAChE,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;YAC7C,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC;QACxE,CAAC,CAAA,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;QAC9B,EAAE,CAAC,oCAAoC,EAAE,GAAS,EAAE;YAClD,MAAM,GAAG,GAAG,IAAA,yBAAW,GAAE,CAAC;YAC1B,MAAM,GAAG,GAAG,IAAA,0BAAY,GAAE,CAAC;YAC3B,MAAM,MAAM,GAAG,IAAI,gBAAK,CAAC,QAAQ,EAAE,CAAC;YACpC,MAAM,WAAW,GAAG,EAAE,GAAG,EAAE,MAAM,EAAE,KAAK,EAAE,eAAe,EAAE,CAAC;YAE5D,GAAG,CAAC,MAAM,GAAG,EAAE,EAAE,EAAE,MAAM,CAAC,WAAW,EAAE,EAAE,CAAC;YAC1C,GAAG,CAAC,IAAI,GAAG,EAAE,KAAK,EAAE,eAAe,EAAE,CAAC;YACrC,WAAW,CAAC,cAA4B,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC;YAEzE,MAAM,cAAc,CAAC,cAAc,CAAC,GAAU,EAAE,GAAU,EAAE,IAAI,CAAC,CAAC;YAElE,MAAM,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC,oBAAoB,CAAC,MAAM,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC;YAC1E,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;YAC7C,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAAC,WAAW,CAAC,CAAC;QACrD,CAAC,CAAA,CAAC,CAAC;QAEH,EAAE,CAAC,qCAAqC,EAAE,GAAS,EAAE;YACnD,MAAM,GAAG,GAAG,IAAA,yBAAW,GAAE,CAAC;YAC1B,MAAM,GAAG,GAAG,IAAA,0BAAY,GAAE,CAAC;YAC3B,MAAM,MAAM,GAAG,IAAI,gBAAK,CAAC,QAAQ,EAAE,CAAC;YAEpC,GAAG,CAAC,MAAM,GAAG,EAAE,EAAE,EAAE,MAAM,CAAC,WAAW,EAAE,EAAE,CAAC;YAC1C,GAAG,CAAC,IAAI,GAAG,EAAE,KAAK,EAAE,eAAe,EAAE,CAAC;YACrC,WAAW,CAAC,cAA4B,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;YAElE,MAAM,cAAc,CAAC,cAAc,CAAC,GAAU,EAAE,GAAU,EAAE,IAAI,CAAC,CAAC;YAElE,MAAM,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC,oBAAoB,CAAC,MAAM,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC;YAC1E,MAAM,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAAC,IAAI,kBAAQ,CAAC,gBAAgB,EAAE,GAAG,CAAC,CAAC,CAAC;QACzE,CAAC,CAAA,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;QAC9B,EAAE,CAAC,iDAAiD,EAAE,GAAS,EAAE;YAC/D,MAAM,GAAG,GAAG,IAAA,yBAAW,GAAE,CAAC;YAC1B,MAAM,GAAG,GAAG,IAAA,0BAAY,GAAE,CAAC;YAC3B,MAAM,MAAM,GAAG,IAAI,gBAAK,CAAC,QAAQ,EAAE,CAAC;YAEpC,GAAG,CAAC,MAAM,GAAG,EAAE,EAAE,EAAE,MAAM,CAAC,WAAW,EAAE,EAAE,CAAC;YACzC,WAAW,CAAC,cAA4B,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;YAEvE,MAAM,cAAc,CAAC,cAAc,CAAC,GAAU,EAAE,GAAU,EAAE,IAAI,CAAC,CAAC;YAElE,MAAM,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;YAChE,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;YAC7C,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAAC;gBACpC,OAAO,EAAE,2BAA2B;aACrC,CAAC,CAAC;QACL,CAAC,CAAA,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","debug_id":"77baefd1-4c6a-53ec-8c10-076e96722231"}