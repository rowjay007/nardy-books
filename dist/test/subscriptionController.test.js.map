{"version":3,"file":"subscriptionController.test.js","sources":["test/subscriptionController.test.ts"],"sourceRoot":"/","sourcesContent":["import { Request, Response, NextFunction } from \"express\";\nimport * as subscriptionService from \"../services/subscriptionService\";\nimport * as subscriptionController from \"../controllers/subscriptionController\";\nimport AppError from \"../utils/appError\";\nimport { mockRequest, mockResponse } from \"../utils/testHelpers\";\n\njest.mock(\"../services/subscriptionService\");\n\ndescribe(\"Subscription Controller\", () => {\n  const next = jest.fn();\n\n  describe(\"createSubscription\", () => {\n    it(\"should create a subscription and return it\", async () => {\n      const req = mockRequest();\n      const res = mockResponse();\n      const subscriptionData = { plan: \"premium\", userId: \"123\" };\n      const createdSubscription = { ...subscriptionData, _id: \"sub1\" };\n\n      req.body = subscriptionData;\n      (subscriptionService.createSubscription as jest.Mock).mockResolvedValue(\n        createdSubscription\n      );\n\n      await subscriptionController.createSubscription(\n        req as Request,\n        res as Response,\n        next\n      );\n\n      expect(subscriptionService.createSubscription).toHaveBeenCalledWith(\n        subscriptionData\n      );\n      expect(res.status).toHaveBeenCalledWith(201);\n      expect(res.json).toHaveBeenCalledWith(createdSubscription);\n    });\n  });\n\n  describe(\"getSubscriptions\", () => {\n    it(\"should return all subscriptions\", async () => {\n      const req = mockRequest();\n      const res = mockResponse();\n      const subscriptions = [{ _id: \"sub1\", plan: \"premium\" }];\n\n      req.query = {\n        filter: JSON.stringify({}),\n        sort: JSON.stringify({ createdAt: -1 }),\n        page: \"1\",\n        limit: \"10\",\n      };\n      (subscriptionService.getSubscriptions as jest.Mock).mockResolvedValue(\n        subscriptions\n      );\n\n      await subscriptionController.getSubscriptions(\n        req as Request,\n        res as Response,\n        next\n      );\n\n      expect(subscriptionService.getSubscriptions).toHaveBeenCalledWith(\n        {},\n        { createdAt: -1 },\n        1,\n        10\n      );\n      expect(res.status).toHaveBeenCalledWith(200);\n      expect(res.json).toHaveBeenCalledWith(subscriptions);\n    });\n  });\n\n  describe(\"getSubscriptionById\", () => {\n    it(\"should return a subscription by ID\", async () => {\n      const req = mockRequest();\n      const res = mockResponse();\n      const subscription = { _id: \"sub1\", plan: \"premium\" };\n\n      req.params = { id: \"sub1\" };\n      (subscriptionService.getSubscriptionById as jest.Mock).mockResolvedValue(\n        subscription\n      );\n\n      await subscriptionController.getSubscriptionById(\n        req as Request,\n        res as Response,\n        next\n      );\n\n      expect(subscriptionService.getSubscriptionById).toHaveBeenCalledWith(\n        \"sub1\"\n      );\n      expect(res.status).toHaveBeenCalledWith(200);\n      expect(res.json).toHaveBeenCalledWith(subscription);\n    });\n\n    it(\"should return 404 if subscription not found\", async () => {\n      const req = mockRequest();\n      const res = mockResponse();\n\n      req.params = { id: \"nonexistent\" };\n      (subscriptionService.getSubscriptionById as jest.Mock).mockResolvedValue(\n        null\n      );\n\n      await subscriptionController.getSubscriptionById(\n        req as Request,\n        res as Response,\n        next\n      );\n\n      expect(subscriptionService.getSubscriptionById).toHaveBeenCalledWith(\n        \"nonexistent\"\n      );\n      expect(next).toHaveBeenCalledWith(\n        new AppError(\"Subscription not found\", 404)\n      );\n    });\n  });\n\n  describe(\"updateSubscription\", () => {\n    it(\"should update a subscription and return it\", async () => {\n      const req = mockRequest();\n      const res = mockResponse();\n      const updatedSubscription = { _id: \"sub1\", plan: \"basic\" };\n\n      req.params = { id: \"sub1\" };\n      req.body = { plan: \"basic\" };\n      (subscriptionService.updateSubscription as jest.Mock).mockResolvedValue(\n        updatedSubscription\n      );\n\n      await subscriptionController.updateSubscription(\n        req as Request,\n        res as Response,\n        next\n      );\n\n      expect(subscriptionService.updateSubscription).toHaveBeenCalledWith(\n        \"sub1\",\n        req.body\n      );\n      expect(res.status).toHaveBeenCalledWith(200);\n      expect(res.json).toHaveBeenCalledWith(updatedSubscription);\n    });\n\n    it(\"should return 404 if subscription not found\", async () => {\n      const req = mockRequest();\n      const res = mockResponse();\n\n      req.params = { id: \"nonexistent\" };\n      req.body = { plan: \"basic\" };\n      (subscriptionService.updateSubscription as jest.Mock).mockResolvedValue(\n        null\n      );\n\n      await subscriptionController.updateSubscription(\n        req as Request,\n        res as Response,\n        next\n      );\n\n      expect(subscriptionService.updateSubscription).toHaveBeenCalledWith(\n        \"nonexistent\",\n        req.body\n      );\n      expect(next).toHaveBeenCalledWith(\n        new AppError(\"Subscription not found\", 404)\n      );\n    });\n  });\n\n  describe(\"deleteSubscription\", () => {\n    it(\"should delete a subscription and return success message\", async () => {\n      const req = mockRequest();\n      const res = mockResponse();\n\n      req.params = { id: \"sub1\" };\n      (subscriptionService.deleteSubscription as jest.Mock).mockResolvedValue(\n        true\n      );\n\n      await subscriptionController.deleteSubscription(\n        req as Request,\n        res as Response,\n        next\n      );\n\n      expect(subscriptionService.deleteSubscription).toHaveBeenCalledWith(\n        \"sub1\"\n      );\n      expect(res.status).toHaveBeenCalledWith(200);\n      expect(res.json).toHaveBeenCalledWith({\n        status: \"success\",\n        message: \"Subscription successfully deleted\",\n        data: null,\n      });\n    });\n\n    it(\"should return 404 if subscription not found\", async () => {\n      const req = mockRequest();\n      const res = mockResponse();\n\n      req.params = { id: \"nonexistent\" };\n      (subscriptionService.deleteSubscription as jest.Mock).mockResolvedValue(\n        false\n      );\n\n      await subscriptionController.deleteSubscription(\n        req as Request,\n        res as Response,\n        next\n      );\n\n      expect(subscriptionService.deleteSubscription).toHaveBeenCalledWith(\n        \"nonexistent\"\n      );\n      expect(next).toHaveBeenCalledWith(\n        new AppError(\"Subscription not found\", 404)\n      );\n    });\n  });\n});\n"],"names":[],"mappings":"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","debug_id":"cdb8e072-df81-567c-8532-7152ae672858"}