{"version":3,"file":"reviewController.test.js","sources":["test/reviewController.test.ts"],"sourceRoot":"/","sourcesContent":["import { Types } from \"mongoose\";\nimport * as reviewController from \"../controllers/reviewController\";\nimport * as ReviewService from \"../services/reviewService\";\nimport AppError from \"../utils/appError\";\nimport { mockRequest, mockResponse } from \"../utils/testHelpers\";\n\njest.mock(\"../services/reviewService\");\n\ndescribe(\"Review Controller\", () => {\n  const next = jest.fn();\n\n  describe(\"getReviewById\", () => {\n    it(\"should return a review by id\", async () => {\n      const req = mockRequest();\n      const res = mockResponse();\n      const reviewId = new Types.ObjectId();\n      const review = { _id: reviewId, content: \"Great book!\" };\n\n      req.params = { id: reviewId.toHexString() };\n      (ReviewService.getReviewById as jest.Mock).mockResolvedValue(review);\n\n      await reviewController.getReviewById(req as any, res as any, next);\n\n      expect(ReviewService.getReviewById).toHaveBeenCalledWith(\n        reviewId.toHexString()\n      );\n      expect(res.status).toHaveBeenCalledWith(200);\n      expect(res.json).toHaveBeenCalledWith({\n        status: \"success\",\n        data: { review },\n      });\n    });\n\n    it(\"should return 404 if review not found\", async () => {\n      const req = mockRequest();\n      const res = mockResponse();\n      const reviewId = new Types.ObjectId();\n\n      req.params = { id: reviewId.toHexString() };\n      (ReviewService.getReviewById as jest.Mock).mockResolvedValue(null);\n\n      await reviewController.getReviewById(req as any, res as any, next);\n\n      expect(ReviewService.getReviewById).toHaveBeenCalledWith(\n        reviewId.toHexString()\n      );\n      expect(next).toHaveBeenCalledWith(\n        new AppError(\"No review found with that ID\", 404)\n      );\n    });\n\n    it(\"should handle invalid review ID\", async () => {\n      const req = mockRequest();\n      const res = mockResponse();\n\n      req.params = {}; \n\n      await reviewController.getReviewById(req as any, res as any, next);\n\n      expect(next).toHaveBeenCalledWith(\n        new AppError(\"No review ID provided\", 400)\n      );\n    });\n  });\n\n  describe(\"updateReviewById\", () => {\n    it(\"should update a review and return it\", async () => {\n      const req = mockRequest();\n      const res = mockResponse();\n      const reviewId = new Types.ObjectId();\n      const updatedReview = { _id: reviewId, content: \"Updated review!\" };\n\n      req.params = { id: reviewId.toHexString() };\n      req.body = { content: \"Updated review!\" };\n      (ReviewService.updateReviewById as jest.Mock).mockResolvedValue(\n        updatedReview\n      );\n\n      await reviewController.updateReviewById(req as any, res as any, next);\n\n      expect(ReviewService.updateReviewById).toHaveBeenCalledWith(\n        reviewId.toHexString(),\n        req.body\n      );\n      expect(res.status).toHaveBeenCalledWith(200);\n      expect(res.json).toHaveBeenCalledWith({\n        status: \"success\",\n        data: { review: updatedReview },\n      });\n    });\n\n    it(\"should return 404 if review not found\", async () => {\n      const req = mockRequest();\n      const res = mockResponse();\n      const reviewId = new Types.ObjectId();\n\n      req.params = { id: reviewId.toHexString() };\n      req.body = { content: \"Updated review!\" };\n      (ReviewService.updateReviewById as jest.Mock).mockResolvedValue(null);\n\n      await reviewController.updateReviewById(req as any, res as any, next);\n\n      expect(ReviewService.updateReviewById).toHaveBeenCalledWith(\n        reviewId.toHexString(),\n        req.body\n      );\n      expect(next).toHaveBeenCalledWith(\n        new AppError(\"No review found with that ID\", 404)\n      );\n    });\n\n    it(\"should handle invalid review ID\", async () => {\n      const req = mockRequest();\n      const res = mockResponse();\n\n      req.params = {}; \n      req.body = { content: \"Updated review!\" };\n\n      await reviewController.updateReviewById(req as any, res as any, next);\n\n      expect(next).toHaveBeenCalledWith(\n        new AppError(\"No review ID provided\", 400)\n      );\n    });\n  });\n\n  describe(\"deleteReviewById\", () => {\n    it(\"should delete a review and return success message\", async () => {\n      const req = mockRequest();\n      const res = mockResponse();\n      const reviewId = new Types.ObjectId();\n\n      req.params = { id: reviewId.toHexString() };\n      (ReviewService.deleteReviewById as jest.Mock).mockResolvedValue(true);\n\n      await reviewController.deleteReviewById(req as any, res as any, next);\n\n      expect(ReviewService.deleteReviewById).toHaveBeenCalledWith(\n        reviewId.toHexString()\n      );\n      expect(res.status).toHaveBeenCalledWith(200);\n      expect(res.json).toHaveBeenCalledWith({\n        status: \"success\",\n        message: \"Review successfully deleted\",\n        data: null,\n      });\n    });\n\n    it(\"should return 404 if review not found\", async () => {\n      const req = mockRequest();\n      const res = mockResponse();\n      const reviewId = new Types.ObjectId();\n\n      req.params = { id: reviewId.toHexString() };\n      (ReviewService.deleteReviewById as jest.Mock).mockResolvedValue(false);\n\n      await reviewController.deleteReviewById(req as any, res as any, next);\n\n      expect(ReviewService.deleteReviewById).toHaveBeenCalledWith(\n        reviewId.toHexString()\n      );\n      expect(next).toHaveBeenCalledWith(\n        new AppError(\"No review found with that ID\", 404)\n      );\n    });\n\n    it(\"should handle invalid review ID\", async () => {\n      const req = mockRequest();\n      const res = mockResponse();\n\n      req.params = {}; \n\n      await reviewController.deleteReviewById(req as any, res as any, next);\n\n      expect(next).toHaveBeenCalledWith(\n        new AppError(\"No review ID provided\", 400)\n      );\n    });\n  });\n});\n"],"names":[],"mappings":"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","debug_id":"c1ee95fe-8618-51ce-9491-c59316919b61"}