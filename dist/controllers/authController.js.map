{"version":3,"file":"authController.js","sources":["controllers/authController.ts"],"sourceRoot":"/","sourcesContent":["import { NextFunction, Request, Response } from \"express\";\nimport httpStatus from \"http-status\";\nimport jwt from \"jsonwebtoken\";\nimport env from \"../config/env\";\nimport * as userService from \"../services/userService\";\nimport AppError from \"../utils/appError\";\n\ninterface AuthenticatedRequest extends Request {\n  user?: string | jwt.JwtPayload;\n}\n\nconst generateAccessToken = (userId: string): string => {\n  return jwt.sign({ id: userId }, env.JWT_SECRET, {\n    expiresIn: \"1h\",\n  });\n};\n\nconst generateRefreshToken = (userId: string): string => {\n  return jwt.sign({ id: userId }, env.REFRESH_TOKEN_SECRET, {\n    expiresIn: env.REFRESH_TOKEN_EXPIRATION,\n  });\n};\n\nexport const register = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const { username, email, password } = req.body;\n    const user = await userService.register(username, email, password);\n    res.status(httpStatus.CREATED).json({\n      message:\n        \"Registration successful. Please check your email for verification.\",\n      user,\n    });\n  } catch (error) {\n    next(error);\n  }\n};\n\n/**\n * Controller function to log in a user\n * @param {Request} req - Express request object containing login credentials in the body\n * @param {Response} res - Express response object\n * @param {NextFunction} next - Express next function\n * @returns {Promise<void>} - Returns a JSON object with success message, user data, access token, and refresh token\n */\nexport const login = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const { email, password } = req.body;\n    const { user } = await userService.login(email, password);\n\n    const accessToken = generateAccessToken(user.id);\n    const refreshToken = generateRefreshToken(user.id);\n\n    res.cookie(\"accessToken\", accessToken, {\n      httpOnly: true,\n      secure: env.NODE_ENV === \"production\",\n      maxAge: 3600000,\n    });\n\n    res.cookie(\"refreshToken\", refreshToken, {\n      httpOnly: true,\n      secure: env.NODE_ENV === \"production\",\n      maxAge: parseInt(env.REFRESH_TOKEN_EXPIRATION) * 24 * 60 * 60 * 1000,\n    });\n\n    res.status(httpStatus.OK).json({\n      message: \"Login successful\",\n      user,\n      accessToken,\n      refreshToken,\n    });\n  } catch (error) {\n    next(error);\n  }\n};\n\n/**\n * Controller function to refresh access and refresh tokens\n * @param {Request} req - Express request object with body containing refreshToken\n * @param {Response} res - Express response object\n * @param {NextFunction} next - Express next function\n * @returns {Promise<void>} - Returns a JSON object with new access and refresh tokens\n */\nexport const refreshTokens = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n): Promise<void> => {\n  const { refreshToken } = req.cookies;\n\n  if (!refreshToken) {\n    return next(\n      new AppError(\"Refresh token is required\", httpStatus.BAD_REQUEST)\n    );\n  }\n\n  try {\n    const decoded = jwt.verify(refreshToken, env.REFRESH_TOKEN_SECRET) as {\n      id: string;\n    };\n\n    const accessToken = generateAccessToken(decoded.id);\n    const newRefreshToken = generateRefreshToken(decoded.id);\n\n    res.cookie(\"accessToken\", accessToken, {\n      httpOnly: true,\n      secure: env.NODE_ENV === \"production\",\n      maxAge: 3600000,\n    });\n\n    res.cookie(\"refreshToken\", newRefreshToken, {\n      httpOnly: true,\n      secure: env.NODE_ENV === \"production\",\n      maxAge: parseInt(env.REFRESH_TOKEN_EXPIRATION) * 24 * 60 * 60 * 1000,\n    });\n\n    res.status(httpStatus.OK).json({\n      status: \"success\",\n      message: \"Tokens refreshed successfully\",\n      accessToken,\n      refreshToken: newRefreshToken,\n    });\n  } catch (error) {\n    next(\n      new AppError(\"Invalid or expired refresh token\", httpStatus.UNAUTHORIZED)\n    );\n  }\n};\n\n/**\n * Controller function to log out a user\n * @param {AuthenticatedRequest} req - Express request object extended with user information\n * @param {Response} res - Express response object\n * @param {NextFunction} next - Express next function\n * @returns {Promise<void>} - Returns a JSON object with a success message\n */\nexport const logout = async (\n  req: AuthenticatedRequest,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    res.clearCookie(\"accessToken\");\n    res.clearCookie(\"refreshToken\");\n\n    res.status(httpStatus.OK).json({\n      message: \"Logout successful\",\n    });\n  } catch (error) {\n    next(error);\n  }\n};\n\n/**\n * Controller function to request a password reset for a user\n * @param {Request} req - Express request object with body containing email\n * @param {Response} res - Express response object\n * @param {NextFunction} next - Express next function\n * @returns {Promise<void>} - Returns a JSON object with a password reset token\n */\nexport const requestPasswordReset = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n): Promise<void> => {\n  const { email } = req.body;\n\n  try {\n    const token = await userService.requestPasswordReset(email);\n\n    res.status(httpStatus.OK).json({\n      status: \"success\",\n      data: { token },\n    });\n  } catch (error) {\n    next(error);\n  }\n};\n\n/**\n * Controller function to reset a user's password using a reset token\n * @param {Request} req - Express request object with params containing token and body containing newPassword\n * @param {Response} res - Express response object\n * @param {NextFunction} next - Express next function\n * @returns {Promise<void>} - Returns a JSON object with the updated user data\n */\nexport const resetPassword = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n): Promise<void> => {\n  const { token } = req.params;\n  const { newPassword } = req.body;\n\n  try {\n    const user = await userService.resetPassword(token, newPassword);\n\n    res.status(httpStatus.OK).json({\n      status: \"success\",\n      data: { user },\n    });\n  } catch (error) {\n    next(error);\n  }\n};\n\n/**\n * Controller function to change a user's password\n * @param {AuthenticatedRequest} req - Express request object extended with user information\n * @param {Response} res - Express response object\n * @param {NextFunction} next - Express next function\n * @returns {Promise<void>} - Returns a JSON object with the updated user data\n */\nexport const changePassword = async (\n  req: AuthenticatedRequest,\n  res: Response,\n  next: NextFunction\n): Promise<void> => {\n  const { currentPassword, newPassword } = req.body;\n  const userId = getUserIdFromRequest(req);\n\n  try {\n    if (!userId) {\n      throw new AppError(\"User not authenticated\", httpStatus.UNAUTHORIZED);\n    }\n\n    const user = await userService.changePassword(\n      userId,\n      currentPassword,\n      newPassword\n    );\n\n    res.status(httpStatus.OK).json({\n      status: \"success\",\n      data: { user },\n    });\n  } catch (error) {\n    next(error);\n  }\n};\n\n/**\n * Controller function to verify a user's email using a verification token\n * @param {Request} req - Express request object with params containing token\n * @param {Response} res - Express response object\n * @param {NextFunction} next - Express next function\n * @returns {Promise<void>} - Returns a JSON object with the updated user data\n */\nexport const verifyEmail = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n): Promise<void> => {\n  const { token } = req.params;\n\n  try {\n    const user = await userService.verifyEmail(token);\n\n    res.status(httpStatus.OK).json({\n      status: \"success\",\n      message: \"Email verified successfully.\",\n      data: { user },\n    });\n  } catch (error) {\n    next(error);\n  }\n};\n\n/**\n * Controller function to resend a verification email to the authenticated user\n * @param {AuthenticatedRequest} req - Express request object extended with user information\n * @param {Response} res - Express response object\n * @param {NextFunction} next - Express next function\n * @returns {Promise<void>} - Returns a JSON object indicating success message\n */\nexport const resendVerificationEmail = async (\n  req: AuthenticatedRequest,\n  res: Response,\n  next: NextFunction\n): Promise<void> => {\n  const userId = getUserIdFromRequest(req);\n\n  try {\n    if (!userId) {\n      throw new AppError(\"User not authenticated\", httpStatus.UNAUTHORIZED);\n    }\n\n    await userService.resendVerificationEmail(userId);\n\n    res.status(httpStatus.OK).json({\n      status: \"success\",\n      message: \"Verification email resent successfully\",\n    });\n  } catch (error) {\n    next(error);\n  }\n};\n\n/**\n * Helper function to extract user ID from the request\n * @param {AuthenticatedRequest} req - Express request object extended with user information\n * @returns {string | undefined} - User ID if found, otherwise undefined\n */\nconst getUserIdFromRequest = (\n  req: AuthenticatedRequest\n): string | undefined => {\n  const user = req.user as jwt.JwtPayload | undefined;\n  return user?.id as string | undefined;\n};\n\n\n\n"],"names":[],"mappings":"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","debug_id":"c9082cad-5d25-52f0-b76d-5c377e05fced"}