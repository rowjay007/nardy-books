{"version":3,"file":"paymentController.js","sources":["controllers/paymentController.ts"],"sourceRoot":"/","sourcesContent":["import { Request, Response, NextFunction } from \"express\";\nimport * as PaymentService from \"../services/paymentService\";\nimport catchAsync from \"../utils/catchAsync\";\nimport AppError from \"../utils/appError\";\nimport httpStatus from \"http-status\";\n\n/**\n * Controller function to create a payment\n * @param {Request} req - Express request object with body containing payment data\n * @param {Response} res - Express response object\n * @param {NextFunction} next - Express next function\n * @returns {Promise<void>} - Returns a JSON object with the payment data\n */\nexport const createPayment = catchAsync(\n  async (req: Request, res: Response, next: NextFunction) => {\n    const payment = await PaymentService.createPayment(req.body);\n    res\n      .status(httpStatus.CREATED)\n      .json({ status: \"success\", data: { payment } });\n  }\n);\n\n/**\n * Controller function to get a payment by ID\n * @param {Request} req - Express request object with params containing payment ID\n * @param {Response} res - Express response object\n * @param {NextFunction} next - Express next function\n * @returns {Promise<void>} - Returns a JSON object with the payment data\n */\nexport const getPaymentById = catchAsync(\n  async (req: Request, res: Response, next: NextFunction) => {\n    const payment = await PaymentService.getPaymentById(req.params.id);\n    if (!payment) {\n      return next(new AppError(\"Payment not found\", httpStatus.NOT_FOUND));\n    }\n    res.status(httpStatus.OK).json({ status: \"success\", data: { payment } });\n  }\n);\n\n/**\n * Controller function to get all payments\n * @param {Request} req - Express request object with query parameters for filtering, sorting, pagination\n * @param {Response} res - Express response object\n * @param {NextFunction} next - Express next function\n * @returns {Promise<void>} - Returns a JSON object with the payments data\n */\nexport const getAllPayments = catchAsync(\n  async (req: Request, res: Response, next: NextFunction) => {\n    const { filter, sort, page, limit } = req.query;\n    const payments = await PaymentService.getAllPayments(\n      JSON.parse((filter as string) || \"{}\"),\n      JSON.parse((sort as string) || \"{}\"),\n      parseInt(page as string, 10) || 1,\n      parseInt(limit as string, 10) || 10\n    );\n    res.status(httpStatus.OK).json({ status: \"success\", data: { payments } });\n  }\n);\n\n/**\n * Controller function to update a payment by ID\n * @param {Request} req - Express request object with params containing payment ID and body containing update data\n * @param {Response} res - Express response object\n * @param {NextFunction} next - Express next function\n * @returns {Promise<void>} - Returns a JSON object with the updated payment data\n */\nexport const updatePayment = catchAsync(\n  async (req: Request, res: Response, next: NextFunction) => {\n    const payment = await PaymentService.updatePayment(req.params.id, req.body);\n    if (!payment) {\n      return next(new AppError(\"Payment not found\", httpStatus.NOT_FOUND));\n    }\n    res.status(httpStatus.OK).json({ status: \"success\", data: { payment } });\n  }\n);\n\n/**\n * Controller function to delete a payment by ID\n * @param {Request} req - Express request object with params containing payment ID\n * @param {Response} res - Express response object\n * @param {NextFunction} next - Express next function\n * @returns {Promise<void>} - Returns a JSON object indicating successful deletion\n */\nexport const deletePayment = catchAsync(\n  async (req: Request, res: Response, next: NextFunction) => {\n    await PaymentService.deletePayment(req.params.id);\n    res.status(httpStatus.OK).json({\n      status: \"success\",\n      message: \"Payment successfully deleted\",\n      data: null,\n    });\n  }\n);\n\n/**\n * Controller function to process a Paystack payment\n * @param {Request} req - Express request object with body containing amount and email\n * @param {Response} res - Express response object\n * @param {NextFunction} next - Express next function\n * @returns {Promise<void>} - Returns a JSON object with the payment response and reference\n */\nexport const processPaystackPayment = catchAsync(\n  async (req: Request, res: Response, next: NextFunction) => {\n    const { amount, email } = req.body;\n    const { response, reference } = await PaymentService.processPaystackPayment(\n      amount,\n      email\n    );\n    res\n      .status(httpStatus.OK)\n      .json({ status: \"success\", data: { response, reference } });\n  }\n);\n\n/**\n * Controller function to verify a Paystack payment\n * @param {Request} req - Express request object with params containing payment reference\n * @param {Response} res - Express response object\n * @param {NextFunction} next - Express next function\n * @returns {Promise<void>} - Returns a JSON object with the payment verification response\n */\nexport const verifyPaystackPayment = catchAsync(\n  async (req: Request, res: Response, next: NextFunction) => {\n    const { reference } = req.params;\n    const response = await PaymentService.verifyPaystackPayment(reference);\n    res.status(httpStatus.OK).json({ status: \"success\", data: { response } });\n  }\n);\n\n/**\n * Controller function to process a Flutterwave payment\n * @param {Request} req - Express request object with body containing amount and email\n * @param {Response} res - Express response object\n * @param {NextFunction} next - Express next function\n * @returns {Promise<void>} - Returns a JSON object with the payment response and reference\n */\nexport const processFlutterwavePayment = catchAsync(\n  async (req: Request, res: Response, next: NextFunction) => {\n    const { amount, email } = req.body;\n    const { response, reference } =\n      await PaymentService.processFlutterwavePayment(amount, email);\n    res\n      .status(httpStatus.OK)\n      .json({ status: \"success\", data: { response, reference } });\n  }\n);\n\n/**\n * Controller function to verify a Flutterwave payment\n * @param {Request} req - Express request object with params containing payment reference\n * @param {Response} res - Express response object\n * @param {NextFunction} next - Express next function\n * @returns {Promise<void>} - Returns a JSON object with the payment verification response\n */\nexport const verifyFlutterwavePayment = catchAsync(\n  async (req: Request, res: Response, next: NextFunction) => {\n    const { reference } = req.params;\n    const response = await PaymentService.verifyFlutterwavePayment(reference);\n    res.status(httpStatus.OK).json({ status: \"success\", data: { response } });\n  }\n);\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,2EAA6D;AAC7D,qEAA6C;AAC7C,iEAAyC;AACzC,8DAAqC;AAErC;;;;;;GAMG;AACU,QAAA,aAAa,GAAG,IAAA,oBAAU,EACrC,CAAO,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;IACxD,MAAM,OAAO,GAAG,MAAM,cAAc,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAC7D,GAAG;SACA,MAAM,CAAC,qBAAU,CAAC,OAAO,CAAC;SAC1B,IAAI,CAAC,EAAE,MAAM,EAAE,SAAS,EAAE,IAAI,EAAE,EAAE,OAAO,EAAE,EAAE,CAAC,CAAC;AACpD,CAAC,CAAA,CACF,CAAC;AAEF;;;;;;GAMG;AACU,QAAA,cAAc,GAAG,IAAA,oBAAU,EACtC,CAAO,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;IACxD,MAAM,OAAO,GAAG,MAAM,cAAc,CAAC,cAAc,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IACnE,IAAI,CAAC,OAAO,EAAE,CAAC;QACb,OAAO,IAAI,CAAC,IAAI,kBAAQ,CAAC,mBAAmB,EAAE,qBAAU,CAAC,SAAS,CAAC,CAAC,CAAC;IACvE,CAAC;IACD,GAAG,CAAC,MAAM,CAAC,qBAAU,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,SAAS,EAAE,IAAI,EAAE,EAAE,OAAO,EAAE,EAAE,CAAC,CAAC;AAC3E,CAAC,CAAA,CACF,CAAC;AAEF;;;;;;GAMG;AACU,QAAA,cAAc,GAAG,IAAA,oBAAU,EACtC,CAAO,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;IACxD,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC;IAChD,MAAM,QAAQ,GAAG,MAAM,cAAc,CAAC,cAAc,CAClD,IAAI,CAAC,KAAK,CAAE,MAAiB,IAAI,IAAI,CAAC,EACtC,IAAI,CAAC,KAAK,CAAE,IAAe,IAAI,IAAI,CAAC,EACpC,QAAQ,CAAC,IAAc,EAAE,EAAE,CAAC,IAAI,CAAC,EACjC,QAAQ,CAAC,KAAe,EAAE,EAAE,CAAC,IAAI,EAAE,CACpC,CAAC;IACF,GAAG,CAAC,MAAM,CAAC,qBAAU,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,SAAS,EAAE,IAAI,EAAE,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC;AAC5E,CAAC,CAAA,CACF,CAAC;AAEF;;;;;;GAMG;AACU,QAAA,aAAa,GAAG,IAAA,oBAAU,EACrC,CAAO,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;IACxD,MAAM,OAAO,GAAG,MAAM,cAAc,CAAC,aAAa,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC;IAC5E,IAAI,CAAC,OAAO,EAAE,CAAC;QACb,OAAO,IAAI,CAAC,IAAI,kBAAQ,CAAC,mBAAmB,EAAE,qBAAU,CAAC,SAAS,CAAC,CAAC,CAAC;IACvE,CAAC;IACD,GAAG,CAAC,MAAM,CAAC,qBAAU,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,SAAS,EAAE,IAAI,EAAE,EAAE,OAAO,EAAE,EAAE,CAAC,CAAC;AAC3E,CAAC,CAAA,CACF,CAAC;AAEF;;;;;;GAMG;AACU,QAAA,aAAa,GAAG,IAAA,oBAAU,EACrC,CAAO,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;IACxD,MAAM,cAAc,CAAC,aAAa,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IAClD,GAAG,CAAC,MAAM,CAAC,qBAAU,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC;QAC7B,MAAM,EAAE,SAAS;QACjB,OAAO,EAAE,8BAA8B;QACvC,IAAI,EAAE,IAAI;KACX,CAAC,CAAC;AACL,CAAC,CAAA,CACF,CAAC;AAEF;;;;;;GAMG;AACU,QAAA,sBAAsB,GAAG,IAAA,oBAAU,EAC9C,CAAO,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;IACxD,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;IACnC,MAAM,EAAE,QAAQ,EAAE,SAAS,EAAE,GAAG,MAAM,cAAc,CAAC,sBAAsB,CACzE,MAAM,EACN,KAAK,CACN,CAAC;IACF,GAAG;SACA,MAAM,CAAC,qBAAU,CAAC,EAAE,CAAC;SACrB,IAAI,CAAC,EAAE,MAAM,EAAE,SAAS,EAAE,IAAI,EAAE,EAAE,QAAQ,EAAE,SAAS,EAAE,EAAE,CAAC,CAAC;AAChE,CAAC,CAAA,CACF,CAAC;AAEF;;;;;;GAMG;AACU,QAAA,qBAAqB,GAAG,IAAA,oBAAU,EAC7C,CAAO,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;IACxD,MAAM,EAAE,SAAS,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;IACjC,MAAM,QAAQ,GAAG,MAAM,cAAc,CAAC,qBAAqB,CAAC,SAAS,CAAC,CAAC;IACvE,GAAG,CAAC,MAAM,CAAC,qBAAU,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,SAAS,EAAE,IAAI,EAAE,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC;AAC5E,CAAC,CAAA,CACF,CAAC;AAEF;;;;;;GAMG;AACU,QAAA,yBAAyB,GAAG,IAAA,oBAAU,EACjD,CAAO,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;IACxD,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;IACnC,MAAM,EAAE,QAAQ,EAAE,SAAS,EAAE,GAC3B,MAAM,cAAc,CAAC,yBAAyB,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;IAChE,GAAG;SACA,MAAM,CAAC,qBAAU,CAAC,EAAE,CAAC;SACrB,IAAI,CAAC,EAAE,MAAM,EAAE,SAAS,EAAE,IAAI,EAAE,EAAE,QAAQ,EAAE,SAAS,EAAE,EAAE,CAAC,CAAC;AAChE,CAAC,CAAA,CACF,CAAC;AAEF;;;;;;GAMG;AACU,QAAA,wBAAwB,GAAG,IAAA,oBAAU,EAChD,CAAO,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;IACxD,MAAM,EAAE,SAAS,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;IACjC,MAAM,QAAQ,GAAG,MAAM,cAAc,CAAC,wBAAwB,CAAC,SAAS,CAAC,CAAC;IAC1E,GAAG,CAAC,MAAM,CAAC,qBAAU,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,SAAS,EAAE,IAAI,EAAE,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC;AAC5E,CAAC,CAAA,CACF,CAAC","debug_id":"24aa5987-ff1b-5af6-a6a4-a940c871444b"}