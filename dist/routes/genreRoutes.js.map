{"version":3,"file":"genreRoutes.js","sources":["routes/genreRoutes.ts"],"sourceRoot":"/","sourcesContent":["import { Router } from \"express\";\nimport * as GenreController from \"../controllers/genreController\";\nimport { protect } from \"../middlewares/authMiddleware\";\n\nconst router = Router();\nrouter.use(protect);\n\n/**\n * @swagger\n * components:\n *   securitySchemes:\n *     bearerAuth:\n *       type: http\n *       scheme: bearer\n *       bearerFormat: JWT\n *   schemas:\n *     Genre:\n *       type: object\n *       required:\n *         - name\n *       properties:\n *         name:\n *           type: string\n *       example:\n *         name: Science Fiction\n */\n\n/**\n * @swagger\n * tags:\n *   name: Genres\n *   description: Genre management\n */\n\n/**\n * @swagger\n * /genres:\n *   get:\n *     summary: Returns the list of all genres\n *     tags: [Genres]\n *     security:\n *       - bearerAuth: []\n *     responses:\n *       200:\n *         description: A list of genres\n *         content:\n *           application/json:\n *             schema:\n *               type: array\n *               items:\n *                 $ref: '#/components/schemas/Genre'\n *       500:\n *         description: Some server error\n */\nrouter.get(\"/\", GenreController.getAllGenres);\n\n/**\n * @swagger\n * /genres/{id}:\n *   get:\n *     summary: Get a specific genre by ID\n *     tags: [Genres]\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - name: id\n *         in: path\n *         required: true\n *         description: ID of the genre to retrieve\n *         schema:\n *           type: string\n *     responses:\n *       200:\n *         description: The genre with the specified ID\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Genre'\n *       404:\n *         description: Genre not found\n *       500:\n *         description: Some server error\n */\nrouter.get(\"/:id\", GenreController.getGenreById);\n\n/**\n * @swagger\n * /genres:\n *   post:\n *     summary: Create a new genre\n *     tags: [Genres]\n *     security:\n *       - bearerAuth: []\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             $ref: '#/components/schemas/Genre'\n *     responses:\n *       201:\n *         description: Genre created successfully\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Genre'\n *       500:\n *         description: Some server error\n */\nrouter.post(\"/\", GenreController.createGenre);\n\n/**\n * @swagger\n * /genres/{id}:\n *   put:\n *     summary: Update a genre by ID\n *     tags: [Genres]\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - name: id\n *         in: path\n *         required: true\n *         description: ID of the genre to update\n *         schema:\n *           type: string\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             $ref: '#/components/schemas/Genre'\n *     responses:\n *       200:\n *         description: Genre updated successfully\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Genre'\n *       404:\n *         description: Genre not found\n *       500:\n *         description: Some server error\n */\nrouter.put(\"/:id\", GenreController.updateGenreById);\n\n/**\n * @swagger\n * /genres/{id}:\n *   delete:\n *     summary: Delete a genre by ID\n *     tags: [Genres]\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - name: id\n *         in: path\n *         required: true\n *         description: ID of the genre to delete\n *         schema:\n *           type: string\n *     responses:\n *       204:\n *         description: Genre deleted successfully\n *       404:\n *         description: Genre not found\n *       500:\n *         description: Some server error\n */\nrouter.delete(\"/:id\", GenreController.deleteGenreById);\n\n/**\n * @swagger\n * /genres/{genreId}/books/{bookId}:\n *   post:\n *     summary: Add a book to a genre\n *     tags: [Genres]\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - name: genreId\n *         in: path\n *         required: true\n *         description: ID of the genre\n *         schema:\n *           type: string\n *       - name: bookId\n *         in: path\n *         required: true\n *         description: ID of the book\n *         schema:\n *           type: string\n *     responses:\n *       200:\n *         description: Book added to genre successfully\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Genre'\n *       404:\n *         description: Genre or book not found\n *       500:\n *         description: Some server error\n */\nrouter.post(\"/:genreId/books/:bookId\", GenreController.addBookToGenre);\n\nexport default router;\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qCAAiC;AACjC,gFAAkE;AAClE,kEAAwD;AAExD,MAAM,MAAM,GAAG,IAAA,gBAAM,GAAE,CAAC;AACxB,MAAM,CAAC,GAAG,CAAC,wBAAO,CAAC,CAAC;AAEpB;;;;;;;;;;;;;;;;;;GAkBG;AAEH;;;;;GAKG;AAEH;;;;;;;;;;;;;;;;;;;GAmBG;AACH,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,eAAe,CAAC,YAAY,CAAC,CAAC;AAE9C;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BG;AACH,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,eAAe,CAAC,YAAY,CAAC,CAAC;AAEjD;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACH,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,eAAe,CAAC,WAAW,CAAC,CAAC;AAE9C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAgCG;AACH,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,eAAe,CAAC,eAAe,CAAC,CAAC;AAEpD;;;;;;;;;;;;;;;;;;;;;;GAsBG;AACH,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,eAAe,CAAC,eAAe,CAAC,CAAC;AAEvD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAgCG;AACH,MAAM,CAAC,IAAI,CAAC,yBAAyB,EAAE,eAAe,CAAC,cAAc,CAAC,CAAC;AAEvE,kBAAe,MAAM,CAAC","debug_id":"28c56cf2-d280-5e0c-8f6a-8af260452e3c"}