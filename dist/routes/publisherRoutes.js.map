{"version":3,"file":"publisherRoutes.js","sources":["routes/publisherRoutes.ts"],"sourceRoot":"/","sourcesContent":["import { Router } from \"express\";\nimport * as PublisherController from \"../controllers/publisherController\";\nimport { protect } from \"../middlewares/authMiddleware\";\n\nconst router = Router();\nrouter.use(protect);\n\n/**\n * @swagger\n * components:\n *   schemas:\n *     Publisher:\n *       type: object\n *       properties:\n *         id:\n *           type: string\n *           description: Unique identifier for the publisher\n *         name:\n *           type: string\n *           description: Name of the publisher\n *         address:\n *           type: string\n *           description: Address of the publisher\n *         books:\n *           type: array\n *           items:\n *             type: string\n *             description: List of books associated with the publisher\n *       example:\n *         id: \"6423e4f4c1e6b4e2f7328a6e\"\n *         name: \"Penguin Books\"\n *         address: \"New York, NY\"\n *         books: [\"6423e4f4c1e6b4e2f7328a6f\", \"6423e4f4c1e6b4e2f7328a70\"]\n */\n\n/**\n * @swagger\n * /publishers:\n *   post:\n *     summary: Create a new publisher\n *     tags: [Publishers]\n *     security:\n *       - bearerAuth: []\n *     requestBody:\n *       description: Publisher data to be added\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             required:\n *               - name\n *               - address\n *             properties:\n *               name:\n *                 type: string\n *               address:\n *                 type: string\n *     responses:\n *       201:\n *         description: Publisher successfully created\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Publisher'\n *       400:\n *         description: Bad request\n *       500:\n *         description: Internal server error\n */\nrouter.post(\"/\", PublisherController.createPublisher);\n\n/**\n * @swagger\n * /publishers/{id}:\n *   get:\n *     summary: Retrieve a publisher by ID\n *     tags: [Publishers]\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - in: path\n *         name: id\n *         required: true\n *         schema:\n *           type: string\n *         description: Publisher ID\n *     responses:\n *       200:\n *         description: Publisher retrieved successfully\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Publisher'\n *       404:\n *         description: Publisher not found\n *       500:\n *         description: Internal server error\n */\nrouter.get(\"/:id\", PublisherController.getPublisherById);\n\n/**\n * @swagger\n * /publishers:\n *   get:\n *     summary: Retrieve all publishers with optional filtering, pagination, and sorting\n *     tags: [Publishers]\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - in: query\n *         name: filter\n *         schema:\n *           type: object\n *         description: JSON object containing filter criteria for publishers\n *       - in: query\n *         name: page\n *         schema:\n *           type: integer\n *         description: Page number for pagination\n *       - in: query\n *         name: limit\n *         schema:\n *           type: integer\n *         description: Number of items per page for pagination\n *       - in: query\n *         name: sort\n *         schema:\n *           type: string\n *           enum: [\"asc\", \"desc\"]\n *         description: Sort order for the retrieved data\n *     responses:\n *       200:\n *         description: List of publishers retrieved successfully\n *         content:\n *           application/json:\n *             schema:\n *               type: array\n *               items:\n *                 $ref: '#/components/schemas/Publisher'\n *       400:\n *         description: Invalid query parameters\n *       500:\n *         description: Internal server error\n */\nrouter.get(\"/\", PublisherController.getAllPublishers);\n\n/**\n * @swagger\n * /publishers/{id}:\n *   put:\n *     summary: Update a publisher by ID\n *     tags: [Publishers]\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - in: path\n *         name: id\n *         required: true\n *         schema:\n *           type: string\n *         description: Publisher ID\n *     requestBody:\n *       description: Publisher data to be updated\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             required:\n *               - name\n *               - address\n *             properties:\n *               name:\n *                 type: string\n *               address:\n *                 type: string\n *     responses:\n *       200:\n *         description: Publisher successfully updated\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Publisher'\n *       404:\n *         description: Publisher not found\n *       500:\n *         description: Internal server error\n */\nrouter.put(\"/:id\", PublisherController.updatePublisherById);\n\n/**\n * @swagger\n * /publishers/{id}:\n *   delete:\n *     summary: Delete a publisher by ID\n *     tags: [Publishers]\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - in: path\n *         name: id\n *         required: true\n *         schema:\n *           type: string\n *         description: Publisher ID\n *     responses:\n *       204:\n *         description: Publisher successfully deleted\n *       404:\n *         description: Publisher not found\n *       500:\n *         description: Internal server error\n */\nrouter.delete(\"/:id\", PublisherController.deletePublisherById);\n\n/**\n * @swagger\n * /publishers/{publisherId}/books/{bookId}:\n *   post:\n *     summary: Add a book to a publisher by IDs\n *     tags: [Publishers]\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - in: path\n *         name: publisherId\n *         required: true\n *         schema:\n *           type: string\n *         description: Publisher ID\n *       - in: path\n *         name: bookId\n *         required: true\n *         schema:\n *           type: string\n *         description: Book ID\n *     responses:\n *       200:\n *         description: Book successfully added to publisher\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Publisher'\n *       404:\n *         description: Publisher not found\n *       500:\n *         description: Internal server error\n */\nrouter.post(\n  \"/:publisherId/books/:bookId\",\n  PublisherController.addBookToPublisher\n);\n\nexport default router;\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qCAAiC;AACjC,wFAA0E;AAC1E,kEAAwD;AAExD,MAAM,MAAM,GAAG,IAAA,gBAAM,GAAE,CAAC;AACxB,MAAM,CAAC,GAAG,CAAC,wBAAO,CAAC,CAAC;AAEpB;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BG;AAEH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAkCG;AACH,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,mBAAmB,CAAC,eAAe,CAAC,CAAC;AAEtD;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BG;AACH,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,mBAAmB,CAAC,gBAAgB,CAAC,CAAC;AAEzD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2CG;AACH,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,mBAAmB,CAAC,gBAAgB,CAAC,CAAC;AAEtD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAyCG;AACH,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,mBAAmB,CAAC,mBAAmB,CAAC,CAAC;AAE5D;;;;;;;;;;;;;;;;;;;;;;GAsBG;AACH,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,mBAAmB,CAAC,mBAAmB,CAAC,CAAC;AAE/D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAgCG;AACH,MAAM,CAAC,IAAI,CACT,6BAA6B,EAC7B,mBAAmB,CAAC,kBAAkB,CACvC,CAAC;AAEF,kBAAe,MAAM,CAAC","debug_id":"87b61edb-7f95-5154-9bdb-f5916fb0831c"}