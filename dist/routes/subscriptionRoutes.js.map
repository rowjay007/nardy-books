{"version":3,"file":"subscriptionRoutes.js","sources":["routes/subscriptionRoutes.ts"],"sourceRoot":"/","sourcesContent":["import { Router } from \"express\";\nimport * as subscriptionController from \"../controllers/subscriptionController\";\nimport { protect } from \"../middlewares/authMiddleware\";\n\nconst router = Router();\nrouter.use(protect);\n\n/**\n * @swagger\n * components:\n *   schemas:\n *     Subscription:\n *       type: object\n *       required:\n *         - type\n *         - startDate\n *         - endDate\n *       properties:\n *         type:\n *           type: string\n *         startDate:\n *           type: string\n *           format: date\n *         endDate:\n *           type: string\n *           format: date\n *         users:\n *           type: array\n *           items:\n *             type: string\n *           description: List of user IDs\n *       example:\n *         type: Premium\n *         startDate: 2024-07-01\n *         endDate: 2025-07-01\n *         users: [\"user1\", \"user2\"]\n *   securitySchemes:\n *     bearerAuth:\n *       type: http\n *       scheme: bearer\n *       bearerFormat: JWT\n */\n\n/**\n * @swagger\n * tags:\n *   name: Subscriptions\n *   description: Subscription management\n */\n\n/**\n * @swagger\n * /api/v1/subscriptions:\n *   post:\n *     summary: Create a new subscription\n *     tags: [Subscriptions]\n *     security:\n *       - bearerAuth: []\n *     requestBody:\n *       description: Subscription details\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             $ref: '#/components/schemas/Subscription'\n *     responses:\n *       201:\n *         description: Subscription created successfully\n *       400:\n *         description: Invalid request body\n *       404:\n *         description: User not found\n */\nrouter.post(\"/\", subscriptionController.createSubscription);\n\n/**\n * @swagger\n * /api/v1/subscriptions:\n *   get:\n *     summary: Get all subscriptions with filters, sorting, and pagination options\n *     tags: [Subscriptions]\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - in: query\n *         name: filter\n *         schema:\n *           type: string\n *         description: JSON filter object for subscriptions\n *       - in: query\n *         name: sort\n *         schema:\n *           type: string\n *         description: JSON sort object for subscriptions\n *       - in: query\n *         name: page\n *         schema:\n *           type: integer\n *         description: Page number for pagination\n *       - in: query\n *         name: limit\n *         schema:\n *           type: integer\n *         description: Limit per page for pagination\n *     responses:\n *       200:\n *         description: List of subscriptions retrieved successfully\n *       400:\n *         description: Invalid query parameters\n */\nrouter.get(\"/\", subscriptionController.getSubscriptions);\n\n/**\n * @swagger\n * /api/v1/subscriptions/{id}:\n *   get:\n *     summary: Get a single subscription by ID\n *     tags: [Subscriptions]\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - in: path\n *         name: id\n *         required: true\n *         schema:\n *           type: string\n *         description: Subscription ID\n *     responses:\n *       200:\n *         description: Subscription details retrieved successfully\n *       404:\n *         description: Subscription not found\n *       400:\n *         description: Invalid ID\n */\nrouter.get(\"/:id\", subscriptionController.getSubscriptionById);\n\n/**\n * @swagger\n * /api/v1/subscriptions/{id}:\n *   put:\n *     summary: Update a subscription by ID\n *     tags: [Subscriptions]\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - in: path\n *         name: id\n *         required: true\n *         schema:\n *           type: string\n *         description: Subscription ID\n *     requestBody:\n *       description: Updated subscription details\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             $ref: '#/components/schemas/Subscription'\n *     responses:\n *       200:\n *         description: Subscription updated successfully\n *       404:\n *         description: Subscription not found\n *       400:\n *         description: Invalid ID or request body\n */\nrouter.put(\"/:id\", subscriptionController.updateSubscription);\n\n/**\n * @swagger\n * /api/v1/subscriptions/{id}:\n *   delete:\n *     summary: Delete a subscription by ID\n *     tags: [Subscriptions]\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - in: path\n *         name: id\n *         required: true\n *         schema:\n *           type: string\n *         description: Subscription ID\n *     responses:\n *       204:\n *         description: Subscription deleted successfully\n *       404:\n *         description: Subscription not found\n *       400:\n *         description: Invalid ID\n */\nrouter.delete(\"/:id\", subscriptionController.deleteSubscription);\n\nexport default router;\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qCAAiC;AACjC,8FAAgF;AAChF,kEAAwD;AAExD,MAAM,MAAM,GAAG,IAAA,gBAAM,GAAE,CAAC;AACxB,MAAM,CAAC,GAAG,CAAC,wBAAO,CAAC,CAAC;AAEpB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAkCG;AAEH;;;;;GAKG;AAEH;;;;;;;;;;;;;;;;;;;;;;GAsBG;AACH,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,sBAAsB,CAAC,kBAAkB,CAAC,CAAC;AAE5D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAkCG;AACH,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,sBAAsB,CAAC,gBAAgB,CAAC,CAAC;AAEzD;;;;;;;;;;;;;;;;;;;;;;GAsBG;AACH,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,sBAAsB,CAAC,mBAAmB,CAAC,CAAC;AAE/D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6BG;AACH,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,sBAAsB,CAAC,kBAAkB,CAAC,CAAC;AAE9D;;;;;;;;;;;;;;;;;;;;;;GAsBG;AACH,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,sBAAsB,CAAC,kBAAkB,CAAC,CAAC;AAEjE,kBAAe,MAAM,CAAC","debug_id":"060e9878-c647-582d-8ee7-ad692703547a"}