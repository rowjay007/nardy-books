{"version":3,"file":"authorRoutes.js","sources":["routes/authorRoutes.ts"],"sourceRoot":"/","sourcesContent":["import { Router } from \"express\";\nimport * as AuthorController from \"../controllers/authorController\";\nimport {protect } from \"../middlewares/authMiddleware\";\n\nconst router = Router();\nrouter.use(protect);\n\n/**\n * @swagger\n * components:\n *   securitySchemes:\n *     bearerAuth:\n *       type: http\n *       scheme: bearer\n *       bearerFormat: JWT\n *   schemas:\n *     Author:\n *       type: object\n *       required:\n *         - name\n *       properties:\n *         id:\n *           type: string\n *           description: The auto-generated id of the author\n *         name:\n *           type: string\n *           description: The name of the author\n *         biography:\n *           type: string\n *           description: The biography of the author\n *         books:\n *           type: array\n *           items:\n *             type: string\n *           description: List of books written by the author\n *       example:\n *         id: d5fE_asz\n *         name: John Doe\n *         biography: Author biography\n *         books: []\n */\n\n/**\n * @swagger\n * /authors:\n *   post:\n *     summary: Create a new author\n *     tags: [Authors]\n *     security:\n *       - bearerAuth: []\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             $ref: '#/components/schemas/Author'\n *     responses:\n *       201:\n *         description: The author was successfully created\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Author'\n *       500:\n *         description: Some server error\n */\nrouter.post(\"/\", AuthorController.createAuthor);\n\n/**\n * @swagger\n * /authors/{id}:\n *   get:\n *     summary: Get an author by ID\n *     tags: [Authors]\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - in: path\n *         name: id\n *         schema:\n *           type: string\n *         required: true\n *         description: The author ID\n *     responses:\n *       200:\n *         description: The author description by ID\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Author'\n *       404:\n *         description: The author was not found\n *       500:\n *         description: Some server error\n */\nrouter.get(\"/:id\", AuthorController.getAuthorById);\n\n/**\n * @swagger\n * /authors:\n *   get:\n *     summary: Returns the list of all authors with filtering, sorting, and pagination options\n *     tags: [Authors]\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - in: query\n *         name: name\n *         schema:\n *           type: string\n *         description: The name filter to apply\n *       - in: query\n *         name: biography\n *         schema:\n *           type: string\n *         description: The biography filter to apply\n *       - in: query\n *         name: page\n *         schema:\n *           type: integer\n *           minimum: 1\n *         description: The page number for pagination\n *       - in: query\n *         name: limit\n *         schema:\n *           type: integer\n *           minimum: 1\n *         description: The number of items per page for pagination\n *       - in: query\n *         name: sort\n *         schema:\n *           type: string\n *           enum: [asc, desc]\n *         description: The sorting direction (asc or desc)\n *     responses:\n *       200:\n *         description: The list of authors\n *         content:\n *           application/json:\n *             schema:\n *               type: array\n *               items:\n *                 $ref: '#/components/schemas/Author'\n *       500:\n *         description: Some server error\n */\nrouter.get(\"/\", AuthorController.getAllAuthors);\n\n/**\n * @swagger\n * /authors/{id}:\n *   put:\n *     summary: Update an author by ID\n *     tags: [Authors]\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - in: path\n *         name: id\n *         schema:\n *           type: string\n *         required: true\n *         description: The author ID\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             $ref: '#/components/schemas/Author'\n *     responses:\n *       200:\n *         description: The author was successfully updated\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Author'\n *       404:\n *         description: The author was not found\n *       500:\n *         description: Some server error\n */\nrouter.put(\"/:id\", AuthorController.updateAuthorById);\n\n/**\n * @swagger\n * /authors/{id}:\n *   delete:\n *     summary: Remove an author by ID\n *     tags: [Authors]\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - in: path\n *         name: id\n *         schema:\n *           type: string\n *         required: true\n *         description: The author ID\n *     responses:\n *       204:\n *         description: The author was successfully deleted\n *       404:\n *         description: The author was not found\n *       500:\n *         description: Some server error\n */\nrouter.delete(\"/:id\", AuthorController.deleteAuthorById);\n\n/**\n * @swagger\n * /authors/{authorId}/books/{bookId}:\n *   post:\n *     summary: Add a book to an author\n *     tags: [Authors]\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - in: path\n *         name: authorId\n *         schema:\n *           type: string\n *         required: true\n *         description: The author ID\n *       - in: path\n *         name: bookId\n *         schema:\n *           type: string\n *         required: true\n *         description: The book ID\n *     responses:\n *       200:\n *         description: The book was successfully added to the author\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Author'\n *       404:\n *         description: The author or book was not found\n *       500:\n *         description: Some server error\n */\nrouter.post(\"/:authorId/books/:bookId\", AuthorController.addBookToAuthor);\n\nexport default router;\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qCAAiC;AACjC,kFAAoE;AACpE,kEAAuD;AAEvD,MAAM,MAAM,GAAG,IAAA,gBAAM,GAAE,CAAC;AACxB,MAAM,CAAC,GAAG,CAAC,wBAAO,CAAC,CAAC;AAEpB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAiCG;AAEH;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACH,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,gBAAgB,CAAC,YAAY,CAAC,CAAC;AAEhD;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BG;AACH,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,gBAAgB,CAAC,aAAa,CAAC,CAAC;AAEnD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAgDG;AACH,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,gBAAgB,CAAC,aAAa,CAAC,CAAC;AAEhD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAgCG;AACH,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,gBAAgB,CAAC,gBAAgB,CAAC,CAAC;AAEtD;;;;;;;;;;;;;;;;;;;;;;GAsBG;AACH,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,gBAAgB,CAAC,gBAAgB,CAAC,CAAC;AAEzD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAgCG;AACH,MAAM,CAAC,IAAI,CAAC,0BAA0B,EAAE,gBAAgB,CAAC,eAAe,CAAC,CAAC;AAE1E,kBAAe,MAAM,CAAC","debug_id":"36514013-f77b-5e22-85c4-8bb54d9bc342"}