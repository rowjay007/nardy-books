{"version":3,"file":"userRoutes.js","sources":["routes/userRoutes.ts"],"sourceRoot":"/","sourcesContent":["import { Router } from \"express\";\nimport * as authController from \"../controllers/authController\";\nimport * as userController from \"../controllers/userController\";\nimport { protect } from \"../middlewares/authMiddleware\";\n\nconst router = Router();\n\n/**\n * @swagger\n * components:\n *   schemas:\n *     User:\n *       type: object\n *       properties:\n *         id:\n *           type: string\n *           description: Unique identifier for the user\n *         username:\n *           type: string\n *           description: User's username\n *         email:\n *           type: string\n *           format: email\n *           description: User's email address\n *         createdAt:\n *           type: string\n *           format: date-time\n *           description: Date and time when the user was created\n *         updatedAt:\n *           type: string\n *           format: date-time\n *           description: Date and time when the user was last updated\n *     Token:\n *       type: object\n *       properties:\n *         token:\n *           type: string\n *           description: JWT token for authentication\n *     Error:\n *       type: object\n *       properties:\n *         status:\n *           type: string\n *           description: Error status code\n *         message:\n *           type: string\n *           description: Error message\n *     ValidationError:\n *       type: object\n *       properties:\n *         status:\n *           type: string\n *           description: Validation error status code\n *         message:\n *           type: string\n *           description: Validation error message\n *         errors:\n *           type: array\n *           items:\n *             type: object\n *             properties:\n *               field:\n *                 type: string\n *                 description: Name of the field with the validation error\n *               message:\n *                 type: string\n *                 description: Validation error message for the field\n */\n\n/**\n * @swagger\n * tags:\n *   name: Authentication\n *   description: API endpoints for authentication\n */\n\n/**\n * @swagger\n * /api/v1/auth/register:\n *   post:\n *     summary: Register a new user\n *     tags: [Authentication]\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             properties:\n *               username:\n *                 type: string\n *               email:\n *                 type: string\n *               password:\n *                 type: string\n *                 format: password\n *     responses:\n *       '200':\n *         description: Successfully registered user\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 status:\n *                   type: string\n *                   example: success\n *                 data:\n *                   $ref: '#/components/schemas/User'\n */\nrouter.post(\"/register\", authController.register);\n\n/**\n * @swagger\n * /api/v1/auth/login:\n *   post:\n *     summary: Login to the application\n *     tags: [Authentication]\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             properties:\n *               email:\n *                 type: string\n *               password:\n *                 type: string\n *                 format: password\n *     responses:\n *       '200':\n *         description: Successfully logged in\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 status:\n *                   type: string\n *                   example: success\n *                 data:\n *                   type: object\n *                   properties:\n *                     user:\n *                       $ref: '#/components/schemas/User'\n *                     token:\n *                       type: string\n *                       description: JWT token for authentication\n */\n\nrouter.post(\"/login\", authController.login);\n\n/**\n * @swagger\n * /api/v1/auth/logout:\n *   post:\n *     summary: Logout from the application\n *     tags: [Authentication]\n *     security:\n *       - bearerAuth: []\n *     responses:\n *       '200':\n *         description: Successfully logged out\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 status:\n *                   type: string\n *                   example: success\n */\n\n/**\n * @swagger\n * /api/v1/auth/refresh-token:\n *   post:\n *     summary: Refresh access tokens\n *     tags: [Authentication]\n *     security:\n *       - bearerAuth: []\n *     responses:\n *       '200':\n *         description: Successfully refreshed tokens\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 status:\n *                   type: string\n *                   example: success\n *                 data:\n *                   type: object\n *                   properties:\n *                     token:\n *                       type: string\n *                       description: New JWT token\n */\nrouter.post(\"/logout\", protect, authController.logout);\n/**\n * @swagger\n * /api/v1/auth/request-reset-password:\n *   post:\n *     summary: Request a password reset\n *     tags: [Authentication]\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             properties:\n *               email:\n *                 type: string\n *     responses:\n *       '200':\n *         description: Password reset request successful\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 status:\n *                   type: string\n *                   example: success\n */\n\nrouter.post(\"/refresh-token\", authController.refreshTokens);\n/**\n * @swagger\n * /api/v1/auth/request-reset-password:\n *   post:\n *     summary: Request a password reset\n *     tags: [Authentication]\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             properties:\n *               email:\n *                 type: string\n *     responses:\n *       '200':\n *         description: Password reset request successful\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 status:\n *                   type: string\n *                   example: success\n */\n\nrouter.post(\"/request-reset-password\", authController.requestPasswordReset);\n\n/**\n * @swagger\n * /api/v1/auth/reset-password/{token}:\n *   post:\n *     summary: Reset password using token\n *     tags: [Authentication]\n *     parameters:\n *       - in: path\n *         name: token\n *         required: true\n *         schema:\n *           type: string\n *         description: Reset token received via email\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             properties:\n *               newPassword:\n *                 type: string\n *                 format: password\n *     responses:\n *       '200':\n *         description: Password reset successful\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 status:\n *                   type: string\n *                   example: success\n */\nrouter.post(\"/reset-password/:token\", authController.resetPassword);\n\n/**\n * @swagger\n * tags:\n *   name: Users\n *   description: API endpoints for managing users\n */\n\n/**\n * @swagger\n * /api/v1/users:\n *   get:\n *     summary: Get all users\n *     tags: [Users]\n *     security:\n *       - bearerAuth: []\n *     responses:\n *       '200':\n *         description: A list of users\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 status:\n *                   type: string\n *                   example: success\n *                 data:\n *                   type: array\n *                   items:\n *                     $ref: '#/components/schemas/User'\n */\nrouter.get(\"/\", protect, userController.getAllUsers);\n\n/**\n * @swagger\n * /api/v1/users/{id}:\n *   get:\n *     summary: Get a user by ID\n *     tags: [Users]\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - in: path\n *         name: id\n *         required: true\n *         schema:\n *           type: string\n *         description: User ID\n *     responses:\n *       '200':\n *         description: User found\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 status:\n *                   type: string\n *                   example: success\n *                 data:\n *                   $ref: '#/components/schemas/User'\n */\n\nrouter.get(\"/:id\", protect, userController.getUserById);\n\n/**\n * @swagger\n * /api/v1/users/{id}:\n *   put:\n *     summary: Update a user by ID\n *     tags: [Users]\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - in: path\n *         name: id\n *         required: true\n *         schema:\n *           type: string\n *         description: User ID\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             properties:\n *               username:\n *                 type: string\n *               email:\n *                 type: string\n *               password:\n *                 type: string\n *                 format: password\n *     responses:\n *       '200':\n *         description: User updated successfully\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 status:\n *                   type: string\n *                   example: success\n *                 data:\n *                   $ref: '#/components/schemas/User'\n */\n\nrouter.put(\"/:id\", protect, userController.updateUserById);\n\n/**\n * @swagger\n * /api/v1/users/{id}:\n *   delete:\n *     summary: Delete a user by ID\n *     tags: [Users]\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - in: path\n *         name: id\n *         required: true\n *         schema:\n *           type: string\n *         description: User ID\n *     responses:\n *       '200':\n *         description: User deleted successfully\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 status:\n *                   type: string\n *                   example: success\n */\nrouter.delete(\"/:id\", protect, userController.deleteUserById);\n\n/**\n * @swagger\n * /api/v1/users/change-password:\n *   put:\n *     summary: Change user password\n *     tags: [Users]\n *     security:\n *       - bearerAuth: []\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             properties:\n *               currentPassword:\n *                 type: string\n *                 format: password\n *               newPassword:\n *                 type: string\n *                 format: password\n *     responses:\n *       '200':\n *         description: Password changed successfully\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 status:\n *                   type: string\n *                   example: success\n */\nrouter.put(\"/change-password\", protect, authController.changePassword);\n/**\n * @swagger\n * /api/v1/users/verify-email/{token}:\n *   get:\n *     summary: Verify user email using token\n *     tags: [Users]\n *     parameters:\n *       - in: path\n *         name: token\n *         required: true\n *         schema:\n *           type: string\n *         description: Verification token received via email\n *     responses:\n *       '200':\n *         description: Email verified successfully\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 status:\n *                   type: string\n *                   example: success\n */\n\nrouter.get(\"/verify-email/:token\", authController.verifyEmail);\n\n/**\n * @swagger\n * /api/v1/users/resend-verification-email:\n *   post:\n *     summary: Resend verification email\n *     tags: [Users]\n *     security:\n *       - bearerAuth: []\n *     responses:\n *       '200':\n *         description: Verification email resent successfully\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 status:\n *                   type: string\n *                   example: success\n */\nrouter.post(\n  \"/resend-verification-email\",\n  protect,\n  authController.resendVerificationEmail\n);\n\n\nexport default router;\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qCAAiC;AACjC,8EAAgE;AAChE,8EAAgE;AAChE,kEAAwD;AAExD,MAAM,MAAM,GAAG,IAAA,gBAAM,GAAE,CAAC;AAExB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4DG;AAEH;;;;;GAKG;AAEH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAiCG;AACH,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,cAAc,CAAC,QAAQ,CAAC,CAAC;AAElD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAqCG;AAEH,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,cAAc,CAAC,KAAK,CAAC,CAAC;AAE5C;;;;;;;;;;;;;;;;;;;GAmBG;AAEH;;;;;;;;;;;;;;;;;;;;;;;;;GAyBG;AACH,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,wBAAO,EAAE,cAAc,CAAC,MAAM,CAAC,CAAC;AACvD;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BG;AAEH,MAAM,CAAC,IAAI,CAAC,gBAAgB,EAAE,cAAc,CAAC,aAAa,CAAC,CAAC;AAC5D;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BG;AAEH,MAAM,CAAC,IAAI,CAAC,yBAAyB,EAAE,cAAc,CAAC,oBAAoB,CAAC,CAAC;AAE5E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAkCG;AACH,MAAM,CAAC,IAAI,CAAC,wBAAwB,EAAE,cAAc,CAAC,aAAa,CAAC,CAAC;AAEpE;;;;;GAKG;AAEH;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACH,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,wBAAO,EAAE,cAAc,CAAC,WAAW,CAAC,CAAC;AAErD;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4BG;AAEH,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,wBAAO,EAAE,cAAc,CAAC,WAAW,CAAC,CAAC;AAExD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA0CG;AAEH,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,wBAAO,EAAE,cAAc,CAAC,cAAc,CAAC,CAAC;AAE3D;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BG;AACH,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,wBAAO,EAAE,cAAc,CAAC,cAAc,CAAC,CAAC;AAE9D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAgCG;AACH,MAAM,CAAC,GAAG,CAAC,kBAAkB,EAAE,wBAAO,EAAE,cAAc,CAAC,cAAc,CAAC,CAAC;AACvE;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AAEH,MAAM,CAAC,GAAG,CAAC,sBAAsB,EAAE,cAAc,CAAC,WAAW,CAAC,CAAC;AAE/D;;;;;;;;;;;;;;;;;;;GAmBG;AACH,MAAM,CAAC,IAAI,CACT,4BAA4B,EAC5B,wBAAO,EACP,cAAc,CAAC,uBAAuB,CACvC,CAAC;AAGF,kBAAe,MAAM,CAAC","debug_id":"87d22424-e422-55b4-b4ff-bce4e443c479"}