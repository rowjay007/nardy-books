{"version":3,"file":"cacheRoutes.js","sources":["routes/cacheRoutes.ts"],"sourceRoot":"/","sourcesContent":["import express, { Request, Response } from \"express\";\nimport cache from \"../utils/cache\";\n\nconst router = express.Router();\n\n/**\n * @swagger\n * components:\n *   schemas:\n *     Cache:\n *       type: object\n *       properties:\n *         key:\n *           type: string\n *           description: The key of the cache entry\n *         value:\n *           type: object\n *           description: The value of the cache entry\n */\n\n/**\n * @swagger\n * tags:\n *   name: Cache\n *   description: Cache management\n */\n\n/**\n * @swagger\n * /cache:\n *   get:\n *     summary: Get all cache entries\n *     tags: [Cache]\n *     responses:\n *       200:\n *         description: A list of cache entries\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               additionalProperties:\n *                 $ref: '#/components/schemas/Cache'\n *       500:\n *         description: Some server error\n */\nrouter.get(\"/\", (req: Request, res: Response) => {\n  const keys = cache.keys();\n  const cacheContents: Record<string, any> = {};\n\n  keys.forEach((key) => {\n    cacheContents[key] = cache.get(key);\n  });\n\n  res.status(200).json({\n    status: \"success\",\n    data: cacheContents,\n  });\n});\n\n/**\n * @swagger\n * /cache:\n *   delete:\n *     summary: Clear all cache entries\n *     tags: [Cache]\n *     responses:\n *       200:\n *         description: Cache cleared successfully\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 status:\n *                   type: string\n *                   example: success\n *                 message:\n *                   type: string\n *                   example: Cache cleared\n *       500:\n *         description: Some server error\n */\nrouter.delete(\"/\", (req: Request, res: Response) => {\n  cache.flushAll();\n  res.status(200).json({\n    status: \"success\",\n    message: \"Cache cleared\",\n  });\n});\n\nexport default router;\n"],"names":[],"mappings":";;;;;;;AAAA,sDAAqD;AACrD,2DAAmC;AAEnC,MAAM,MAAM,GAAG,iBAAO,CAAC,MAAM,EAAE,CAAC;AAEhC;;;;;;;;;;;;;GAaG;AAEH;;;;;GAKG;AAEH;;;;;;;;;;;;;;;;;GAiBG;AACH,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAY,EAAE,GAAa,EAAE,EAAE;IAC9C,MAAM,IAAI,GAAG,eAAK,CAAC,IAAI,EAAE,CAAC;IAC1B,MAAM,aAAa,GAAwB,EAAE,CAAC;IAE9C,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;QACnB,aAAa,CAAC,GAAG,CAAC,GAAG,eAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACtC,CAAC,CAAC,CAAC;IAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;QACnB,MAAM,EAAE,SAAS;QACjB,IAAI,EAAE,aAAa;KACpB,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH;;;;;;;;;;;;;;;;;;;;;;GAsBG;AACH,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,GAAY,EAAE,GAAa,EAAE,EAAE;IACjD,eAAK,CAAC,QAAQ,EAAE,CAAC;IACjB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;QACnB,MAAM,EAAE,SAAS;QACjB,OAAO,EAAE,eAAe;KACzB,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,kBAAe,MAAM,CAAC","debug_id":"fa663e11-a157-5fff-8e5a-b3135de9130e"}