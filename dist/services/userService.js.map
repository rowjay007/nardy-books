{"version":3,"file":"userService.js","sources":["services/userService.ts"],"sourceRoot":"/","sourcesContent":["import bcrypt from \"bcrypt\";\nimport crypto from \"crypto\";\nimport jwt from \"jsonwebtoken\";\nimport env from \"../config/env\";\nimport User, { IUser } from \"../models/userModel\";\nimport userRepository from \"../repositories/userRepository\";\nimport AppError from \"../utils/appError\";\nimport {\n  sendResetPasswordEmail,\n  sendVerificationEmail,\n  sendWelcomeEmail,\n} from \"../utils/emailUtils\";\nimport cache, { CACHE_TTL_SECONDS } from \"../utils/cache\";\n\nconst generateAccessToken = (userId: string) => {\n  return jwt.sign({ id: userId }, env.JWT_SECRET, {\n    expiresIn: \"1h\",\n  });\n};\n\nconst generateRefreshToken = (userId: string) => {\n  return jwt.sign({ id: userId }, env.REFRESH_TOKEN_SECRET, {\n    expiresIn: env.REFRESH_TOKEN_EXPIRATION,\n  });\n};\n\nconst register = async (\n  username: string,\n  email: string,\n  password: string\n): Promise<IUser> => {\n  const verificationToken = crypto.randomBytes(32).toString(\"hex\");\n  const user = new User({\n    username,\n    email,\n    password,\n    verificationToken,\n  });\n  await user.save();\n\n  const verificationLink = `${env.EMAIL_VERIFICATION_URL}/${verificationToken}`;\n  await Promise.all([\n    sendWelcomeEmail(email, username, verificationLink),\n    sendVerificationEmail(email, verificationLink),\n  ]);\n\n  cache.flushAll(); \n  \n\n  return user;\n};\n\nconst login = async (email: string, password: string) => {\n  const user = await userRepository.findUserByEmail(email);\n  if (!user) throw new AppError(\"Invalid email or password\", 401);\n\n  const isPasswordCorrect = await bcrypt.compare(password, user.password);\n  if (!isPasswordCorrect) throw new AppError(\"Invalid email or password\", 401);\n\n  const accessToken = generateAccessToken(user._id as string);\n  const refreshToken = generateRefreshToken(user._id as string);\n\n  await userRepository.setRefreshToken(user._id as string, refreshToken);\n\n  return { user, accessToken, refreshToken };\n};\n\nconst logout = async (userId: string) => {\n  await userRepository.removeRefreshToken(userId);\n  cache.flushAll(); \n  \n};\n\nconst requestPasswordReset = async (email: string) => {\n  const user = await userRepository.findUserByEmail(email);\n  if (!user) throw new AppError(\"User not found\", 404);\n\n  const token = crypto.randomBytes(20).toString(\"hex\");\n  const expires = new Date(Date.now() + 3600000);\n\n  await userRepository.setResetPasswordToken(\n    user._id as string,\n    token,\n    expires\n  );\n\n  const resetLink = `${env.RESET_PASSWORD_URL}/reset-password/${token}`;\n  await sendResetPasswordEmail(email, resetLink);\n\n  return token;\n};\n\nconst resetPassword = async (token: string, newPassword: string) => {\n  const user = await userRepository.findByResetPasswordToken(token);\n  if (!user) throw new AppError(\"Invalid or expired token\", 400);\n\n  user.password = await bcrypt.hash(newPassword, 12);\n  user.resetPasswordToken = undefined;\n  user.resetPasswordExpires = undefined;\n  await user.save();\n\n  cache.flushAll(); \n  \n\n  return user;\n};\n\nconst changePassword = async (\n  userId: string,\n  currentPassword: string,\n  newPassword: string\n) => {\n  const user = await userRepository.findUserById(userId);\n  if (!user) throw new AppError(\"User not found\", 404);\n\n  const isPasswordCorrect = await bcrypt.compare(\n    currentPassword,\n    user.password\n  );\n  if (!isPasswordCorrect)\n    throw new AppError(\"Current password is incorrect\", 401);\n\n  user.password = await bcrypt.hash(newPassword, 12);\n  await user.save();\n\n  cache.flushAll(); \n  \n\n  return user;\n};\n\nconst verifyEmail = async (verificationToken: string): Promise<IUser> => {\n  const user = await User.findOneAndUpdate(\n    { verificationToken },\n    { $set: { isEmailVerified: true, verificationToken: undefined } },\n    { new: true }\n  );\n\n  if (!user) {\n    throw new AppError(\"Invalid verification token.\", 400);\n  }\n\n  cache.flushAll(); \n  \n\n  return user;\n};\n\nconst resendVerificationEmail = async (userId: string) => {\n  const user = await userRepository.findUserById(userId);\n  if (!user) throw new AppError(\"User not found\", 404);\n\n  const verificationToken = crypto.randomBytes(32).toString(\"hex\");\n  user.verificationToken = verificationToken;\n  await user.save();\n\n  const verificationLink = `${process.env.EMAIL_VERIFICATION_URL}/verify-email/${verificationToken}`;\n  await sendVerificationEmail(user.email, verificationLink);\n\n  cache.flushAll(); \n  \n};\n\nconst getUserById = async (userId: string): Promise<IUser | null> => {\n  const cacheKey = `user_${userId}`;\n  let user = cache.get<IUser | null>(cacheKey);\n\n  if (user === undefined) {\n    user = await userRepository.findUserById(userId);\n    if (user) {\n      cache.set(cacheKey, user, CACHE_TTL_SECONDS);\n    }\n  }\n\n  return user;\n};\n\n\nconst getAllUsers = async (\n  filter: any,\n  sort: any,\n  limit: number,\n  skip: number\n) => {\n  const cacheKey = `allUsers_${JSON.stringify({ filter, sort, limit, skip })}`;\n  let users = cache.get<IUser[]>(cacheKey);\n\n  if (!users) {\n    users = await userRepository.findUsers(filter, sort, limit, skip);\n    cache.set(cacheKey, users, CACHE_TTL_SECONDS);\n  }\n\n  return users;\n};\n\nconst updateUser = async (userId: string, updateData: any) => {\n  const user = await userRepository.updateUser(userId, updateData);\n  if (user) {\n    cache.flushAll(); \n    \n  }\n  return user;\n};\n\nconst deleteUser = async (userId: string) => {\n  await userRepository.deleteUser(userId);\n  cache.flushAll(); \n  \n};\n\nexport default {\n  register,\n  login,\n  logout,\n  requestPasswordReset,\n  resetPassword,\n  changePassword,\n  verifyEmail,\n  resendVerificationEmail,\n  getUserById,\n  getAllUsers,\n  updateUser,\n  deleteUser,\n};\n"],"names":[],"mappings":"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","debug_id":"d296d33a-6f45-589e-a24f-5bd3c0978754"}