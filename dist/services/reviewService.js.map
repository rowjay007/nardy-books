{"version":3,"file":"reviewService.js","sources":["services/reviewService.ts"],"sourceRoot":"/","sourcesContent":["import * as ReviewRepository from \"../repositories/reviewRepository\";\nimport { Types } from \"mongoose\";\nimport cache, { CACHE_TTL_SECONDS } from \"../utils/cache\";\n\nexport const createReview = async (reviewData: any) => {\n  const review = await ReviewRepository.createReview(reviewData);\n  cache.flushAll(); \n  return review;\n};\n\nexport const getReviewById = async (reviewId: string) => {\n  const cacheKey = `review_${reviewId}`;\n  const id = new Types.ObjectId(reviewId);\n  let review = cache.get<any>(cacheKey);\n\n  if (!review) {\n    review = await ReviewRepository.getReviewById(id);\n    if (review) {\n      cache.set(cacheKey, review, CACHE_TTL_SECONDS);\n    }\n  }\n\n  return review;\n};\n\nexport const getAllReviews = async (\n  filter: Record<string, any>,\n  page: number,\n  limit: number,\n  sort: Record<string, \"asc\" | \"desc\">\n) => {\n  const cacheKey = `allReviews_${JSON.stringify({\n    filter,\n    page,\n    limit,\n    sort,\n  })}`;\n  let reviews = cache.get<any[]>(cacheKey);\n\n  if (!reviews) {\n    reviews = await ReviewRepository.getAllReviews(filter, page, limit, sort);\n    cache.set(cacheKey, reviews, CACHE_TTL_SECONDS);\n  }\n\n  return reviews;\n};\n\nexport const updateReviewById = async (reviewId: string, updateData: any) => {\n  const id = new Types.ObjectId(reviewId);\n  const review = await ReviewRepository.updateReviewById(id, updateData);\n  if (review) {\n    cache.flushAll(); \n  }\n  return review;\n};\nexport const deleteReviewById = async (reviewId: string): Promise<boolean> => {\n  const id = new Types.ObjectId(reviewId);\n  const result = await ReviewRepository.deleteReviewById(id);\n  cache.flushAll();\n  return result !== null;\n};\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,mFAAqE;AACrE,uCAAiC;AACjC,wDAA0D;AAEnD,MAAM,YAAY,GAAG,CAAO,UAAe,EAAE,EAAE;IACpD,MAAM,MAAM,GAAG,MAAM,gBAAgB,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;IAC/D,eAAK,CAAC,QAAQ,EAAE,CAAC;IACjB,OAAO,MAAM,CAAC;AAChB,CAAC,CAAA,CAAC;AAJW,QAAA,YAAY,gBAIvB;AAEK,MAAM,aAAa,GAAG,CAAO,QAAgB,EAAE,EAAE;IACtD,MAAM,QAAQ,GAAG,UAAU,QAAQ,EAAE,CAAC;IACtC,MAAM,EAAE,GAAG,IAAI,gBAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IACxC,IAAI,MAAM,GAAG,eAAK,CAAC,GAAG,CAAM,QAAQ,CAAC,CAAC;IAEtC,IAAI,CAAC,MAAM,EAAE,CAAC;QACZ,MAAM,GAAG,MAAM,gBAAgB,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;QAClD,IAAI,MAAM,EAAE,CAAC;YACX,eAAK,CAAC,GAAG,CAAC,QAAQ,EAAE,MAAM,EAAE,yBAAiB,CAAC,CAAC;QACjD,CAAC;IACH,CAAC;IAED,OAAO,MAAM,CAAC;AAChB,CAAC,CAAA,CAAC;AAbW,QAAA,aAAa,iBAaxB;AAEK,MAAM,aAAa,GAAG,CAC3B,MAA2B,EAC3B,IAAY,EACZ,KAAa,EACb,IAAoC,EACpC,EAAE;IACF,MAAM,QAAQ,GAAG,cAAc,IAAI,CAAC,SAAS,CAAC;QAC5C,MAAM;QACN,IAAI;QACJ,KAAK;QACL,IAAI;KACL,CAAC,EAAE,CAAC;IACL,IAAI,OAAO,GAAG,eAAK,CAAC,GAAG,CAAQ,QAAQ,CAAC,CAAC;IAEzC,IAAI,CAAC,OAAO,EAAE,CAAC;QACb,OAAO,GAAG,MAAM,gBAAgB,CAAC,aAAa,CAAC,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;QAC1E,eAAK,CAAC,GAAG,CAAC,QAAQ,EAAE,OAAO,EAAE,yBAAiB,CAAC,CAAC;IAClD,CAAC;IAED,OAAO,OAAO,CAAC;AACjB,CAAC,CAAA,CAAC;AApBW,QAAA,aAAa,iBAoBxB;AAEK,MAAM,gBAAgB,GAAG,CAAO,QAAgB,EAAE,UAAe,EAAE,EAAE;IAC1E,MAAM,EAAE,GAAG,IAAI,gBAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IACxC,MAAM,MAAM,GAAG,MAAM,gBAAgB,CAAC,gBAAgB,CAAC,EAAE,EAAE,UAAU,CAAC,CAAC;IACvE,IAAI,MAAM,EAAE,CAAC;QACX,eAAK,CAAC,QAAQ,EAAE,CAAC;IACnB,CAAC;IACD,OAAO,MAAM,CAAC;AAChB,CAAC,CAAA,CAAC;AAPW,QAAA,gBAAgB,oBAO3B;AACK,MAAM,gBAAgB,GAAG,CAAO,QAAgB,EAAoB,EAAE;IAC3E,MAAM,EAAE,GAAG,IAAI,gBAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IACxC,MAAM,MAAM,GAAG,MAAM,gBAAgB,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC;IAC3D,eAAK,CAAC,QAAQ,EAAE,CAAC;IACjB,OAAO,MAAM,KAAK,IAAI,CAAC;AACzB,CAAC,CAAA,CAAC;AALW,QAAA,gBAAgB,oBAK3B","debug_id":"d7139836-7f78-511c-ab2b-7bae238af79b"}